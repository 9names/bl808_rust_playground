/* automatically generated by rust-bindgen 0.63.0 */

#[repr(u32)]
#[doc = "  @brief GLB AHB clock IP type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_AHB_CLOCK_IP_Type {
    GLB_AHB_CLOCK_IP_CPU = 0,
    GLB_AHB_CLOCK_IP_SDU = 1,
    GLB_AHB_CLOCK_IP_SEC = 2,
    GLB_AHB_CLOCK_IP_DMA_0 = 3,
    GLB_AHB_CLOCK_IP_DMA_1 = 4,
    GLB_AHB_CLOCK_IP_DMA_2 = 5,
    GLB_AHB_CLOCK_IP_CCI = 6,
    GLB_AHB_CLOCK_IP_RF_TOP = 7,
    GLB_AHB_CLOCK_IP_GPIP = 8,
    GLB_AHB_CLOCK_IP_TZC = 9,
    GLB_AHB_CLOCK_IP_EF_CTRL = 10,
    GLB_AHB_CLOCK_IP_SF_CTRL = 11,
    GLB_AHB_CLOCK_IP_EMAC = 12,
    GLB_AHB_CLOCK_IP_UART0 = 13,
    GLB_AHB_CLOCK_IP_UART1 = 14,
    GLB_AHB_CLOCK_IP_UART2 = 15,
    GLB_AHB_CLOCK_IP_UART3 = 16,
    GLB_AHB_CLOCK_IP_SPI = 17,
    GLB_AHB_CLOCK_IP_I2C = 18,
    GLB_AHB_CLOCK_IP_PWM = 19,
    GLB_AHB_CLOCK_IP_TIMER = 20,
    GLB_AHB_CLOCK_IP_IR = 21,
    GLB_AHB_CLOCK_IP_CHECKSUM = 22,
    GLB_AHB_CLOCK_IP_QDEC = 23,
    GLB_AHB_CLOCK_IP_KYS = 24,
    GLB_AHB_CLOCK_IP_I2S = 25,
    GLB_AHB_CLOCK_IP_USB11 = 26,
    GLB_AHB_CLOCK_IP_CAM = 27,
    GLB_AHB_CLOCK_IP_MJPEG = 28,
    GLB_AHB_CLOCK_IP_BT_BLE_NORMAL = 29,
    GLB_AHB_CLOCK_IP_BT_BLE_LP = 30,
    GLB_AHB_CLOCK_IP_ZB_NORMAL = 31,
    GLB_AHB_CLOCK_IP_ZB_LP = 32,
    GLB_AHB_CLOCK_IP_WIFI_NORMAL = 33,
    GLB_AHB_CLOCK_IP_WIFI_LP = 34,
    GLB_AHB_CLOCK_IP_BT_BLE_2_NORMAL = 35,
    GLB_AHB_CLOCK_IP_BT_BLE_2_LP = 36,
    GLB_AHB_CLOCK_IP_EMI_MISC = 37,
    GLB_AHB_CLOCK_IP_PSRAM0_CTRL = 38,
    GLB_AHB_CLOCK_IP_PSRAM1_CTRL = 39,
    GLB_AHB_CLOCK_IP_USB20 = 40,
    GLB_AHB_CLOCK_IP_MIX2 = 41,
    GLB_AHB_CLOCK_IP_AUDIO = 42,
    GLB_AHB_CLOCK_IP_SDH = 43,
    GLB_AHB_CLOCK_IP_ZB2_NORMAL = 44,
    GLB_AHB_CLOCK_IP_ZB2_LP = 45,
    GLB_AHB_CLOCK_IP_I2C1 = 46,
    GLB_AHB_CLOCK_IP_WIFI_PHY = 47,
    GLB_AHB_CLOCK_IP_WIFI_MAC_PHY = 48,
    GLB_AHB_CLOCK_IP_WIFI_PLATFORM = 49,
    GLB_AHB_CLOCK_IP_LZ4 = 50,
    GLB_AHB_CLOCK_IP_AUPDM = 51,
    GLB_AHB_CLOCK_IP_GAUGE = 52,
}
#[repr(u32)]
#[doc = "  @brief GLB core ID type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_CORE_ID_Type {
    #[doc = "< M0"]
    GLB_CORE_ID_M0 = 0,
    #[doc = "< D0"]
    GLB_CORE_ID_D0 = 1,
    #[doc = "< LP"]
    GLB_CORE_ID_LP = 2,
    #[doc = "< ID max"]
    GLB_CORE_ID_MAX = 3,
    #[doc = "< ID invalid"]
    GLB_CORE_ID_INVALID = 4,
}
#[repr(u32)]
#[doc = "  @brief cci ID type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum CCI_ID_Type {
    #[doc = "< CCI0 port define"]
    CCI0_ID = 0,
    #[doc = "< CCI MAX ID define"]
    CCI_ID_MAX = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP all interrupt type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_ALL_INT_Type {
    #[doc = "< bus_dec_err_int"]
    GLB_DSP_ALL_INT_BUS_DEC_ERR_INT = 0,
    #[doc = "< spp_rsv0_int"]
    GLB_DSP_ALL_INT_SPP_RSV0_INT = 1,
    #[doc = "< ipc2_np2ap_irq"]
    GLB_DSP_ALL_INT_IPC2_NP2AP_IRQ = 2,
    #[doc = "< rsv3"]
    GLB_DSP_ALL_INT_RSV3 = 3,
    #[doc = "< uart0_int"]
    GLB_DSP_ALL_INT_UART0_INT = 4,
    #[doc = "< i2c0_int"]
    GLB_DSP_ALL_INT_I2C0_INT = 5,
    #[doc = "< i2c1_int"]
    GLB_DSP_ALL_INT_I2C1_INT = 6,
    #[doc = "< spi_int"]
    GLB_DSP_ALL_INT_SPI_INT = 7,
    #[doc = "< spp_rsv1_int"]
    GLB_DSP_ALL_INT_SPP_RSV1_INT = 8,
    #[doc = "< spp_rsv2_int"]
    GLB_DSP_ALL_INT_SPP_RSV2_INT = 9,
    #[doc = "< seof1_int"]
    GLB_DSP_ALL_INT_SEOF1_INT = 10,
    #[doc = "< seof2_int"]
    GLB_DSP_ALL_INT_SEOF2_INT = 11,
    #[doc = "< seof3_int"]
    GLB_DSP_ALL_INT_SEOF3_INT = 12,
    #[doc = "< dvp2bus_int[0]"]
    GLB_DSP_ALL_INT_DVP2BUS_INT_0 = 13,
    #[doc = "< dvp2bus_int[1]"]
    GLB_DSP_ALL_INT_DVP2BUS_INT_1 = 14,
    #[doc = "< dvp2bus_int[2]"]
    GLB_DSP_ALL_INT_DVP2BUS_INT_2 = 15,
    #[doc = "< dvp2bus_int[3]"]
    GLB_DSP_ALL_INT_DVP2BUS_INT_3 = 16,
    #[doc = "< h264_bs_irq"]
    GLB_DSP_ALL_INT_H264_BS_IRQ = 17,
    #[doc = "< h264_frame_irq"]
    GLB_DSP_ALL_INT_H264_FRAME_IRQ = 18,
    #[doc = "< h264_seq_done_int"]
    GLB_DSP_ALL_INT_H264_SEQ_DONE_INT = 19,
    #[doc = "< mjpeg_int"]
    GLB_DSP_ALL_INT_MJPEG_INT = 20,
    #[doc = "< h264_s_bs_irq"]
    GLB_DSP_ALL_INT_H264_S_BS_IRQ = 21,
    #[doc = "< h264_s_frame_irq"]
    GLB_DSP_ALL_INT_H264_S_FRAME_IRQ = 22,
    #[doc = "< h264_s_seq_done_int"]
    GLB_DSP_ALL_INT_H264_S_SEQ_DONE_INT = 23,
    #[doc = "< DMA_INTR[0]"]
    GLB_DSP_ALL_INT_DMA_INTR_0 = 24,
    #[doc = "< DMA_INTR[1]"]
    GLB_DSP_ALL_INT_DMA_INTR_1 = 25,
    #[doc = "< DMA_INTR[2]"]
    GLB_DSP_ALL_INT_DMA_INTR_2 = 26,
    #[doc = "< DMA_INTR[3]"]
    GLB_DSP_ALL_INT_DMA_INTR_3 = 27,
    #[doc = "< DMA_INTR[4]"]
    GLB_DSP_ALL_INT_DMA_INTR_4 = 28,
    #[doc = "< DMA_INTR[5]"]
    GLB_DSP_ALL_INT_DMA_INTR_5 = 29,
    #[doc = "< DMA_INTR[6]"]
    GLB_DSP_ALL_INT_DMA_INTR_6 = 30,
    #[doc = "< DMA_INTR[7]"]
    GLB_DSP_ALL_INT_DMA_INTR_7 = 31,
    #[doc = "< rsv32"]
    GLB_DSP_ALL_INT_RSV32 = 32,
    #[doc = "< rsv33"]
    GLB_DSP_ALL_INT_RSV33 = 33,
    #[doc = "< rsv34"]
    GLB_DSP_ALL_INT_RSV34 = 34,
    #[doc = "< rsv35"]
    GLB_DSP_ALL_INT_RSV35 = 35,
    #[doc = "< rsv36"]
    GLB_DSP_ALL_INT_RSV36 = 36,
    #[doc = "< mipi_csi_int"]
    GLB_DSP_ALL_INT_MIPI_CSI_INT = 37,
    #[doc = "< ipc2_ap2np_irq"]
    GLB_DSP_ALL_INT_IPC2_AP2NP_IRQ = 38,
    #[doc = "< rsv39"]
    GLB_DSP_ALL_INT_RSV39 = 39,
    #[doc = "< mjdec_int"]
    GLB_DSP_ALL_INT_MJDEC_INT = 40,
    #[doc = "< dvp2bus_int[4]"]
    GLB_DSP_ALL_INT_DVP2BUS_IN_4 = 41,
    #[doc = "< dvp2bus_int[5]"]
    GLB_DSP_ALL_INT_DVP2BUS_IN_5 = 42,
    #[doc = "< dvp2bus_int[6]"]
    GLB_DSP_ALL_INT_DVP2BUS_IN_6 = 43,
    #[doc = "< dvp2bus_int[7]"]
    GLB_DSP_ALL_INT_DVP2BUS_IN_7 = 44,
    #[doc = "< dma2d_int[0]"]
    GLB_DSP_ALL_INT_DMA2D_INT_0 = 45,
    #[doc = "< dma2d_int[1]"]
    GLB_DSP_ALL_INT_DMA2D_INT_1 = 46,
    #[doc = "< dp_soef0_int"]
    GLB_DSP_ALL_INT_DP_SOEF0_INT = 47,
    #[doc = "< rsv48"]
    GLB_DSP_ALL_INT_RSV48 = 48,
    #[doc = "< rsv49"]
    GLB_DSP_ALL_INT_RSV49 = 49,
    #[doc = "< rsv50"]
    GLB_DSP_ALL_INT_RSV50 = 50,
    #[doc = "< rsv51"]
    GLB_DSP_ALL_INT_RSV51 = 51,
    #[doc = "< osdDP_int"]
    GLB_DSP_ALL_INT_OSDDP_INT = 52,
    #[doc = "< dbi_int"]
    GLB_DSP_ALL_INT_DBI_INT = 53,
    #[doc = "< spp_rsv3_int"]
    GLB_DSP_ALL_INT_SPP_RSV3_INT = 54,
    #[doc = "< osdA_int"]
    GLB_DSP_ALL_INT_OSDA_INT = 55,
    #[doc = "< osdB_int"]
    GLB_DSP_ALL_INT_OSDB_INT = 56,
    #[doc = "< osd_pb_int"]
    GLB_DSP_ALL_INT_OSD_PB_INT = 57,
    #[doc = "< spp_rsv4_int"]
    GLB_DSP_ALL_INT_SPP_RSV4_INT = 58,
    #[doc = "< mipi_dsi_int"]
    GLB_DSP_ALL_INT_MIPI_DSI_INT = 59,
    #[doc = "< spp_rsv5_hist_int"]
    GLB_DSP_ALL_INT_SPP_RSV5_HIST_INT = 60,
    #[doc = "< mm_timer_irq2"]
    GLB_DSP_ALL_INT_MM_TIMER_IRQ2 = 61,
    #[doc = "< mm_timer_irq3"]
    GLB_DSP_ALL_INT_MM_TIMER_IRQ3 = 62,
    #[doc = "< mm_wdt_irq"]
    GLB_DSP_ALL_INT_MM_WDT_IRQ = 63,
}
#[repr(u32)]
#[doc = "  @brief GLB MCU all interrupt type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_MCU_ALL_INT_Type {
    #[doc = "< bmx_err_intmcu_dec_err_int"]
    GLB_MCU_ALL_INT_BMX_ERR_INT = 0,
    #[doc = "< bmx_timeout_intmcu_timeout_int"]
    GLB_MCU_ALL_INT_BMX_TIMEOUT_INT_MCU_TIMEOUT_INT = 1,
    #[doc = "< ipc0_np2ap_irq"]
    GLB_MCU_ALL_INT_IPC0_NP2AP_IRQ = 2,
    #[doc = "< ipc0_ap2np_irq"]
    GLB_MCU_ALL_INT_IPC0_AP2NP_IRQ = 3,
    #[doc = "< audio_int"]
    GLB_MCU_ALL_INT_AUDIO_INT = 4,
    #[doc = "< rf_top_int[0]"]
    GLB_MCU_ALL_INT_RF_TOP_INT_0 = 5,
    #[doc = "< rf_top_int[1]"]
    GLB_MCU_ALL_INT_RF_TOP_INT_1 = 6,
    #[doc = "< lz4_int"]
    GLB_MCU_ALL_INT_LZ4_INT = 7,
    #[doc = "< rsv8"]
    GLB_MCU_ALL_INT_RSV8 = 8,
    #[doc = "< sec_eng_id0_gmac_int"]
    GLB_MCU_ALL_INT_SEC_ENG_ID0_GMAC_INT = 9,
    #[doc = "< sec_eng_id0_cdet_int"]
    GLB_MCU_ALL_INT_SEC_ENG_ID0_CDET_INT = 10,
    #[doc = "< sec_eng_id0_pka_int"]
    GLB_MCU_ALL_INT_SEC_ENG_ID0_PKA_INT = 11,
    #[doc = "< sec_eng_id0_trng_int"]
    GLB_MCU_ALL_INT_SEC_ENG_ID0_TRNG_INT = 12,
    #[doc = "< sec_eng_id0_aes_int"]
    GLB_MCU_ALL_INT_SEC_ENG_ID0_AES_INT = 13,
    #[doc = "< sec_eng_id0_sha_int"]
    GLB_MCU_ALL_INT_SEC_ENG_ID0_SHA_INT = 14,
    #[doc = "< DMA_INTR_ALL"]
    GLB_MCU_ALL_INT_DMA_INTR_ALL = 15,
    #[doc = "< DMA2_INTR_ALL"]
    GLB_MCU_ALL_INT_DMA2_INTR_ALL = 16,
    #[doc = "< sdh_mmc1_intsdh2pmu_wakeup_int1"]
    GLB_MCU_ALL_INT_SDH_MMC1_INT_SDH2PMU_WAKEUP_INT1 = 17,
    #[doc = "< mm_irq_all"]
    GLB_MCU_ALL_INT_MM_IRQ_ALL = 18,
    #[doc = "< irtx_int"]
    GLB_MCU_ALL_INT_IRTX_INT = 19,
    #[doc = "< irrx_int"]
    GLB_MCU_ALL_INT_IRRX_INT = 20,
    #[doc = "< usb_int"]
    GLB_MCU_ALL_INT_USB_INT = 21,
    #[doc = "< aupdm_int"]
    GLB_MCU_ALL_INT_AUPDM_INT = 22,
    #[doc = "< sf_ctrl_id0_int"]
    GLB_MCU_ALL_INT_SF_CTRL_ID0_INT = 23,
    #[doc = "< emac_int"]
    GLB_MCU_ALL_INT_EMAC_INT = 24,
    #[doc = "< gpadc_dma_int"]
    GLB_MCU_ALL_INT_GPADC_DMA_INT = 25,
    #[doc = "< efuse_int"]
    GLB_MCU_ALL_INT_EFUSE_INT = 26,
    #[doc = "< spi_0_int"]
    GLB_MCU_ALL_INT_SPI_0_INT = 27,
    #[doc = "< uart_irq"]
    GLB_MCU_ALL_INT_UART_IRQ = 28,
    #[doc = "< uart1_irq"]
    GLB_MCU_ALL_INT_UART1_IRQ = 29,
    #[doc = "< uart2_irq"]
    GLB_MCU_ALL_INT_UART2_IRQ = 30,
    #[doc = "< gpio_dma_int"]
    GLB_MCU_ALL_INT_GPIO_DMA_INT = 31,
    #[doc = "< i2c_0_int"]
    GLB_MCU_ALL_INT_I2C_0_INT = 32,
    #[doc = "< pwm_int"]
    GLB_MCU_ALL_INT_PWM_INT = 33,
    #[doc = "< ipc1_np2ap_irq"]
    GLB_MCU_ALL_INT_IPC1_NP2AP_IRQ = 34,
    #[doc = "< ipc1_ap2np_irq"]
    GLB_MCU_ALL_INT_IPC1_AP2NP_IRQ = 35,
    #[doc = "< timer0_2_irq"]
    GLB_MCU_ALL_INT_TIMER0_2_IRQ = 36,
    #[doc = "< timer0_3_irq"]
    GLB_MCU_ALL_INT_TIMER0_3_IRQ = 37,
    #[doc = "< wdt0_irq"]
    GLB_MCU_ALL_INT_WDT0_IRQ = 38,
    #[doc = "< i2c_1_int"]
    GLB_MCU_ALL_INT_I2C_1_INT = 39,
    #[doc = "< i2s0_int"]
    GLB_MCU_ALL_INT_I2S0_INT = 40,
    #[doc = "< rsv41"]
    GLB_MCU_ALL_INT_RSV41 = 41,
    #[doc = "< rsv42"]
    GLB_MCU_ALL_INT_RSV42 = 42,
    #[doc = "< ana_ocp_out_to_cpu_irq[2:0]"]
    GLB_MCU_ALL_INT_ANA_OCP_OUT_TO_CPU_IRQ = 43,
    #[doc = "< gpio_irq"]
    GLB_MCU_ALL_INT_GPIO_IRQ = 44,
    #[doc = "< dm_irq"]
    GLB_MCU_ALL_INT_DM_IRQ = 45,
    #[doc = "< bt_irq"]
    GLB_MCU_ALL_INT_BT_IRQ = 46,
    #[doc = "< m154_req_enh_ack_int"]
    GLB_MCU_ALL_INT_M154_REQ_ENH_ACK_INT = 47,
    #[doc = "< m154_int"]
    GLB_MCU_ALL_INT_M154_INT = 48,
    #[doc = "< m154_aes_int"]
    GLB_MCU_ALL_INT_M154_AES_INT = 49,
    #[doc = "< pds_int"]
    GLB_MCU_ALL_INT_PDS_INT = 50,
    #[doc = "< hbn_irq_out[0]"]
    GLB_MCU_ALL_INT_HBN_IRQ_OUT_0 = 51,
    #[doc = "< hbn_irq_out[1]"]
    GLB_MCU_ALL_INT_HBN_IRQ_OUT_1 = 52,
    #[doc = "< bor_out"]
    GLB_MCU_ALL_INT_BOR_OUT = 53,
    #[doc = "< wifi_to_cpu_irq_n"]
    GLB_MCU_ALL_INT_WIFI_TO_CPU_IRQ_N = 54,
    #[doc = "< bz_phy_int"]
    GLB_MCU_ALL_INT_BZ_PHY_INT = 55,
    #[doc = "< ble_int"]
    GLB_MCU_ALL_INT_BLE_INT = 56,
    #[doc = "< mac_int_tx_rx_timer"]
    GLB_MCU_ALL_INT_MAC_INT_TX_RX_TIMER = 57,
    #[doc = "< mac_int_tx_rx_misc"]
    GLB_MCU_ALL_INT_MAC_INT_TX_RX_MISC = 58,
    #[doc = "< mac_int_rx_trigger"]
    GLB_MCU_ALL_INT_MAC_INT_RX_TRIGGER = 59,
    #[doc = "< mac_int_tx_trigger"]
    GLB_MCU_ALL_INT_MAC_INT_TX_TRIGGER = 60,
    #[doc = "< mac_int_gen"]
    GLB_MCU_ALL_INT_MAC_INT_GEN = 61,
    #[doc = "< mac_int_prot_trigger"]
    GLB_MCU_ALL_INT_MAC_INT_PROT_TRIGGER = 62,
    #[doc = "< wifi_ipc"]
    GLB_MCU_ALL_INT_WIFI_IPC = 63,
}
#[repr(u32)]
#[doc = "  @brief GLB LP all interrupt type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_LP_ALL_INT_Type {
    #[doc = "< bmx_err_int"]
    GLB_LP_ALL_INT_BMX_ERR_INT = 0,
    #[doc = "< bmx_timeout_intmcu_timeout_int"]
    GLB_LP_ALL_INT_BMX_TIMEOUT_INT_MCU_TIMEOUT_INT = 1,
    #[doc = "< ipc0_np2ap_irq"]
    GLB_LP_ALL_INT_IPC0_NP2AP_IRQ = 2,
    #[doc = "< ipc0_ap2np_irq"]
    GLB_LP_ALL_INT_IPC0_AP2NP_IRQ = 3,
    #[doc = "< audio_int"]
    GLB_LP_ALL_INT_AUDIO_INT = 4,
    #[doc = "< rf_top_int[0]"]
    GLB_LP_ALL_INT_RF_TOP_INT_0 = 5,
    #[doc = "< rf_top_int[1]"]
    GLB_LP_ALL_INT_RF_TOP_INT_1 = 6,
    #[doc = "< lz4_int"]
    GLB_LP_ALL_INT_LZ4_INT = 7,
    #[doc = "< rsv8"]
    GLB_LP_ALL_INT_RSV8 = 8,
    #[doc = "< sec_eng_id0_gmac_int"]
    GLB_LP_ALL_INT_SEC_ENG_ID0_GMAC_INT = 9,
    #[doc = "< sec_eng_id0_cdet_int"]
    GLB_LP_ALL_INT_SEC_ENG_ID0_CDET_INT = 10,
    #[doc = "< sec_eng_id0_pka_int"]
    GLB_LP_ALL_INT_SEC_ENG_ID0_PKA_INT = 11,
    #[doc = "< sec_eng_id0_trng_int"]
    GLB_LP_ALL_INT_SEC_ENG_ID0_TRNG_INT = 12,
    #[doc = "< sec_eng_id0_aes_int"]
    GLB_LP_ALL_INT_SEC_ENG_ID0_AES_INT = 13,
    #[doc = "< sec_eng_id0_sha_int"]
    GLB_LP_ALL_INT_SEC_ENG_ID0_SHA_INT = 14,
    #[doc = "< DMA_INTR_ALL"]
    GLB_LP_ALL_INT_DMA_INTR_ALL = 15,
    #[doc = "< DMA2_INTR_ALL"]
    GLB_LP_ALL_INT_DMA2_INTR_ALL = 16,
    #[doc = "< sdh_mmc1_intsdh2pmu_wakeup_int1"]
    GLB_LP_ALL_INT_SDH_MMC1_INT_SDH2PMU_WAKEUP_INT1 = 17,
    #[doc = "< mm_irq_all"]
    GLB_LP_ALL_INT_MM_IRQ_ALL = 18,
    #[doc = "< irtx_int"]
    GLB_LP_ALL_INT_IRTX_INT = 19,
    #[doc = "< irrx_int"]
    GLB_LP_ALL_INT_IRRX_INT = 20,
    #[doc = "< usb_int"]
    GLB_LP_ALL_INT_USB_INT = 21,
    #[doc = "< aupdm_int"]
    GLB_LP_ALL_INT_AUPDM_INT = 22,
    #[doc = "< sf_ctrl_id0_int"]
    GLB_LP_ALL_INT_SF_CTRL_ID0_INT = 23,
    #[doc = "< emac_int"]
    GLB_LP_ALL_INT_EMAC_INT = 24,
    #[doc = "< gpadc_dma_int"]
    GLB_LP_ALL_INT_GPADC_DMA_INT = 25,
    #[doc = "< efuse_int"]
    GLB_LP_ALL_INT_EFUSE_INT = 26,
    #[doc = "< spi_0_int"]
    GLB_LP_ALL_INT_SPI_0_INT = 27,
    #[doc = "< uart_irq"]
    GLB_LP_ALL_INT_UART_IRQ = 28,
    #[doc = "< uart1_irq"]
    GLB_LP_ALL_INT_UART1_IRQ = 29,
    #[doc = "< uart2_irq"]
    GLB_LP_ALL_INT_UART2_IRQ = 30,
    #[doc = "< gpio_dma_int"]
    GLB_LP_ALL_INT_GPIO_DMA_INT = 31,
    #[doc = "< i2c_0_int"]
    GLB_LP_ALL_INT_I2C_0_INT = 32,
    #[doc = "< pwm_int"]
    GLB_LP_ALL_INT_PWM_INT = 33,
    #[doc = "< ipc1_np2ap_irq"]
    GLB_LP_ALL_INT_IPC1_NP2AP_IRQ = 34,
    #[doc = "< ipc1_ap2np_irq"]
    GLB_LP_ALL_INT_IPC1_AP2NP_IRQ = 35,
    #[doc = "< timer0_2_irq"]
    GLB_LP_ALL_INT_TIMER0_2_IRQ = 36,
    #[doc = "< timer0_3_irq"]
    GLB_LP_ALL_INT_TIMER0_3_IRQ = 37,
    #[doc = "< wdt0_irq"]
    GLB_LP_ALL_INT_WDT0_IRQ = 38,
    #[doc = "< i2c_1_int"]
    GLB_LP_ALL_INT_I2C_1_INT = 39,
    #[doc = "< i2s0_int"]
    GLB_LP_ALL_INT_I2S0_INT = 40,
    #[doc = "< rsv41"]
    GLB_LP_ALL_INT_RSV41 = 41,
    #[doc = "< rsv42"]
    GLB_LP_ALL_INT_RSV42 = 42,
    #[doc = "< ana_ocp_out_to_cpu_irq[2:0]"]
    GLB_LP_ALL_INT_ANA_OCP_OUT_TO_CPU_IRQ = 43,
    #[doc = "< gpio_irq"]
    GLB_LP_ALL_INT_GPIO_IRQ = 44,
    #[doc = "< dm_irq"]
    GLB_LP_ALL_INT_DM_IRQ = 45,
    #[doc = "< bt_irq"]
    GLB_LP_ALL_INT_BT_IRQ = 46,
    #[doc = "< m154_req_enh_ack_int"]
    GLB_LP_ALL_INT_M154_REQ_ENH_ACK_INT = 47,
    #[doc = "< m154_int"]
    GLB_LP_ALL_INT_M154_INT = 48,
    #[doc = "< m154_aes_int"]
    GLB_LP_ALL_INT_M154_AES_INT = 49,
    #[doc = "< pds_int"]
    GLB_LP_ALL_INT_PDS_INT = 50,
    #[doc = "< hbn_irq_out[0]"]
    GLB_LP_ALL_INT_HBN_IRQ_OUT_0 = 51,
    #[doc = "< hbn_irq_out[1]"]
    GLB_LP_ALL_INT_HBN_IRQ_OUT_1 = 52,
    #[doc = "< bor_out"]
    GLB_LP_ALL_INT_BOR_OUT = 53,
    #[doc = "< wifi_to_cpu_irq_n"]
    GLB_LP_ALL_INT_WIFI_TO_CPU_IRQ_N = 54,
    #[doc = "< bz_phy_int"]
    GLB_LP_ALL_INT_BZ_PHY_INT = 55,
    #[doc = "< ble_int"]
    GLB_LP_ALL_INT_BLE_INT = 56,
    #[doc = "< mac_int_tx_rx_timer"]
    GLB_LP_ALL_INT_MAC_INT_TX_RX_TIMER = 57,
    #[doc = "< mac_int_tx_rx_misc"]
    GLB_LP_ALL_INT_MAC_INT_TX_RX_MISC = 58,
    #[doc = "< mac_int_rx_trigger"]
    GLB_LP_ALL_INT_MAC_INT_RX_TRIGGER = 59,
    #[doc = "< mac_int_tx_trigger"]
    GLB_LP_ALL_INT_MAC_INT_TX_TRIGGER = 60,
    #[doc = "< mac_int_gen"]
    GLB_LP_ALL_INT_MAC_INT_GEN = 61,
    #[doc = "< mac_int_prot_trigger"]
    GLB_LP_ALL_INT_MAC_INT_PROT_TRIGGER = 62,
    #[doc = "< wifi_ipc"]
    GLB_LP_ALL_INT_WIFI_IPC = 63,
}
#[repr(u32)]
#[doc = "  @brief GLB dsp muxpll 320M clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_MUXPLL_320M_CLK_SEL_Type {
    #[doc = "< dsp muxpll select wifipll 320M"]
    GLB_DSP_MUXPLL_SEL_WIFIPLL_320M = 0,
    #[doc = "< dsp muxpll select aupll div1"]
    GLB_DSP_MUXPLL_SEL_AUPLL_DIV1 = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB dsp muxpll 240M clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_MUXPLL_240M_CLK_SEL_Type {
    #[doc = "< dsp muxpll select wifipll 240M"]
    GLB_DSP_MUXPLL_SEL_WIFIPLL_240M = 0,
    #[doc = "< dsp muxpll select aupll div2"]
    GLB_DSP_MUXPLL_SEL_AUPLL_DIV2 = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB dsp muxpll 160M clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_MUXPLL_160M_CLK_SEL_Type {
    #[doc = "< dsp muxpll select wifipll 160M"]
    GLB_DSP_MUXPLL_SEL_WIFIPLL_160M = 0,
    #[doc = "< dsp muxpll select cpupll 160M"]
    GLB_DSP_MUXPLL_SEL_CPUPLL_160M = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB mcu muxpll 160M clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_MCU_MUXPLL_160M_CLK_SEL_Type {
    #[doc = "< mcu muxpll select wifipll 160M"]
    GLB_MCU_MUXPLL_SEL_WIFIPLL_160M = 0,
    #[doc = "< mcu muxpll select top cpupll 160M"]
    GLB_MCU_MUXPLL_SEL_TOP_CPUPLL_160M = 1,
    #[doc = "< mcu muxpll select top aupll div2"]
    GLB_MCU_MUXPLL_SEL_TOP_AUPLL_DIV2 = 2,
    #[doc = "< mcu muxpll select aupll div2p5"]
    GLB_MCU_MUXPLL_SEL_AUPLL_DIV2P5 = 3,
}
#[repr(u32)]
#[doc = "  @brief GLB mcu muxpll 80M clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_MCU_MUXPLL_80M_CLK_SEL_Type {
    #[doc = "< mcu muxpll select wifipll 80M"]
    GLB_MCU_MUXPLL_SEL_WIFIPLL_80M = 0,
    #[doc = "< mcu muxpll select top cpupll 80M"]
    GLB_MCU_MUXPLL_SEL_TOP_CPUPLL_80M = 1,
    #[doc = "< mcu muxpll select aupll div5"]
    GLB_MCU_MUXPLL_SEL_AUPLL_DIV5 = 2,
    #[doc = "< mcu muxpll select aupll div6"]
    GLB_MCU_MUXPLL_SEL_AUPLL_DIV6 = 3,
}
#[repr(u32)]
#[doc = "  @brief GLB pll clock gate type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_PLL_CGEN_Type {
    #[doc = "< pll cgen mm wifipll 160m"]
    GLB_PLL_CGEN_MM_WIFIPLL_160M = 0,
    #[doc = "< pll cgen mm wifipll 240m"]
    GLB_PLL_CGEN_MM_WIFIPLL_240M = 1,
    #[doc = "< pll cgen mm wifipll 320m"]
    GLB_PLL_CGEN_MM_WIFIPLL_320M = 2,
    #[doc = "< pll cgen mm aupll div1"]
    GLB_PLL_CGEN_MM_AUPLL_DIV1 = 3,
    #[doc = "< pll cgen mm aupll div2"]
    GLB_PLL_CGEN_MM_AUPLL_DIV2 = 4,
    #[doc = "< pll cgen emi cpupll 400m"]
    GLB_PLL_CGEN_EMI_CPUPLL_400M = 5,
    #[doc = "< pll cgen emi cpupll 200m"]
    GLB_PLL_CGEN_EMI_CPUPLL_200M = 6,
    #[doc = "< pll cgen emi wifipll 320m"]
    GLB_PLL_CGEN_EMI_WIFIPLL_320M = 7,
    #[doc = "< pll cgen emi aupll div1"]
    GLB_PLL_CGEN_EMI_AUPLL_DIV1 = 8,
    #[doc = "< pll cgen top cpupll 80m"]
    GLB_PLL_CGEN_TOP_CPUPLL_80M = 9,
    #[doc = "< pll cgen top cpupll 100m"]
    GLB_PLL_CGEN_TOP_CPUPLL_100M = 10,
    #[doc = "< pll cgen top cpupll 160m"]
    GLB_PLL_CGEN_TOP_CPUPLL_160M = 11,
    #[doc = "< pll cgen top cpupll 400m"]
    GLB_PLL_CGEN_TOP_CPUPLL_400M = 12,
    #[doc = "< pll cgen top wifipll 240m"]
    GLB_PLL_CGEN_TOP_WIFIPLL_240M = 13,
    #[doc = "< pll cgen top wifipll 320m"]
    GLB_PLL_CGEN_TOP_WIFIPLL_320M = 14,
    #[doc = "< pll cgen top aupll div2"]
    GLB_PLL_CGEN_TOP_AUPLL_DIV2 = 15,
    #[doc = "< pll cgen top aupll div1"]
    GLB_PLL_CGEN_TOP_AUPLL_DIV1 = 16,
}
#[repr(u32)]
#[doc = "  @brief GLB mcu system clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_MCU_SYS_CLK_Type {
    #[doc = "< use RC32M as system clock frequency"]
    GLB_MCU_SYS_CLK_RC32M = 0,
    #[doc = "< use XTAL as system clock"]
    GLB_MCU_SYS_CLK_XTAL = 1,
    #[doc = "< use CPUPLL output 400M as system clock"]
    GLB_MCU_SYS_CLK_CPUPLL_400M = 2,
    #[doc = "< use WIFIPLL output 240M as system clock"]
    GLB_MCU_SYS_CLK_WIFIPLL_240M = 3,
    #[doc = "< use WIFIPLL output 320M as system clock"]
    GLB_MCU_SYS_CLK_WIFIPLL_320M = 4,
}
#[repr(u32)]
#[doc = "  @brief GLB dsp system clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_SYS_CLK_Type {
    #[doc = "< use RC32M as system clock frequency"]
    GLB_DSP_SYS_CLK_RC32M = 0,
    #[doc = "< use XTAL as system clock"]
    GLB_DSP_SYS_CLK_XTAL = 1,
    #[doc = "< use WIFIPLL 240M as system clock"]
    GLB_DSP_SYS_CLK_MM_WIFIPLL_240M = 2,
    #[doc = "< use WIFIPLL 320M as system clock"]
    GLB_DSP_SYS_CLK_MM_WIFIPLL_320M = 3,
    #[doc = "< use CPUPLL output 400M as system clock"]
    GLB_DSP_SYS_CLK_CPUPLL_400M = 4,
}
#[repr(u32)]
#[doc = "  @brief GLB dsp pbus clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_SYS_PBCLK_Type {
    #[doc = "< use rc32m as pbus clock"]
    GLB_DSP_SYS_PBCLK_RC32M = 0,
    #[doc = "< use xtal as pbus clock"]
    GLB_DSP_SYS_PBCLK_XTAL = 1,
    #[doc = "< use mm_wifipll_160m_clk as pbus clock"]
    GLB_DSP_SYS_PBCLK_MM_WIFIPLL_160M = 2,
    #[doc = "< use cpupll_160m_clk as pbus clock"]
    GLB_DSP_SYS_PBCLK_CPUPLL_160M = 3,
    #[doc = "< use mm_wifipll_240m_clk as pbus clock"]
    GLB_DSP_SYS_PBCLK_MM_WIFIPLL_240M = 4,
}
#[repr(u32)]
#[doc = "  @brief GLB dsp system clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_PLL_REF_CLK_Type {
    #[doc = "< use XTAL as pll ref clock"]
    GLB_PLL_REFCLK_XTAL = 0,
    #[doc = "< use RC32M as pll ref clock"]
    GLB_PLL_REFCLK_RC32M = 3,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLB_WAC_PLL_CFG_BASIC_Type {
    #[doc = "< xxx pll_refdiv_ratio"]
    pub clkpllRefdivRatio: u8,
    #[doc = "< xxx pll_int_frac_sw"]
    pub clkpllIntFracSw: u8,
    #[doc = "< xxx pll_icp_1u"]
    pub clkpllIcp1u: u8,
    #[doc = "< xxx pll_icp_5u"]
    pub clkpllIcp5u: u8,
    #[doc = "< xxx pll_rz"]
    pub clkpllRz: u8,
    #[doc = "< xxx pll_cz"]
    pub clkpllCz: u8,
    #[doc = "< xxx pll_c3"]
    pub clkpllC3: u8,
    #[doc = "< xxx pll_r4_short"]
    pub clkpllR4Short: u8,
    #[doc = "< xxx pll_r4_en"]
    pub clkpllC4En: u8,
    #[doc = "< xxx pll_sel_sample_clk"]
    pub clkpllSelSampleClk: u8,
    #[doc = "< xxx pll_vco_speed"]
    pub clkpllVcoSpeed: u8,
    #[doc = "< xxx pll_sdm_ctrl_hw"]
    pub clkpllSdmCtrlHw: u8,
    #[doc = "< xxx pll_sdm_bypass"]
    pub clkpllSdmBypass: u8,
}
#[test]
fn bindgen_test_layout_GLB_WAC_PLL_CFG_BASIC_Type() {
    const UNINIT: ::core::mem::MaybeUninit<GLB_WAC_PLL_CFG_BASIC_Type> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<GLB_WAC_PLL_CFG_BASIC_Type>(),
        13usize,
        concat!("Size of: ", stringify!(GLB_WAC_PLL_CFG_BASIC_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<GLB_WAC_PLL_CFG_BASIC_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(GLB_WAC_PLL_CFG_BASIC_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllRefdivRatio) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllRefdivRatio)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllIntFracSw) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllIntFracSw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllIcp1u) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllIcp1u)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllIcp5u) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllIcp5u)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllRz) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllRz)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllCz) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllCz)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllC3) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllC3)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllR4Short) as usize - ptr as usize },
        7usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllR4Short)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllC4En) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllC4En)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllSelSampleClk) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllSelSampleClk)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllVcoSpeed) as usize - ptr as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllVcoSpeed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllSdmCtrlHw) as usize - ptr as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllSdmCtrlHw)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllSdmBypass) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllSdmBypass)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLB_WAC_PLL_Cfg_Type {
    #[doc = "< pll basic configuration"]
    pub basicCfg: *const GLB_WAC_PLL_CFG_BASIC_Type,
    #[doc = "< pll sdmin value"]
    pub clkpllSdmin: u32,
}
#[test]
fn bindgen_test_layout_GLB_WAC_PLL_Cfg_Type() {
    const UNINIT: ::core::mem::MaybeUninit<GLB_WAC_PLL_Cfg_Type> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<GLB_WAC_PLL_Cfg_Type>(),
        16usize,
        concat!("Size of: ", stringify!(GLB_WAC_PLL_Cfg_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<GLB_WAC_PLL_Cfg_Type>(),
        8usize,
        concat!("Alignment of ", stringify!(GLB_WAC_PLL_Cfg_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).basicCfg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_Cfg_Type),
            "::",
            stringify!(basicCfg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllSdmin) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_WAC_PLL_Cfg_Type),
            "::",
            stringify!(clkpllSdmin)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLB_MU_PLL_CFG_BASIC_Type {
    #[doc = "< xxx pll_refdiv_ratio"]
    pub clkpllRefdivRatio: u8,
    #[doc = "< xxx pll_sel_sample_clk"]
    pub clkpllSelSampleClk: u8,
    #[doc = "< xxx pll_vco_speed"]
    pub clkpllVcoSpeed: u8,
    #[doc = "< xxx pll_even_div_en"]
    pub clkpllEvenDivEn: u8,
    #[doc = "< xxx pll_even_div_ratio"]
    pub clkpllEvenDivRatio: u8,
}
#[test]
fn bindgen_test_layout_GLB_MU_PLL_CFG_BASIC_Type() {
    const UNINIT: ::core::mem::MaybeUninit<GLB_MU_PLL_CFG_BASIC_Type> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<GLB_MU_PLL_CFG_BASIC_Type>(),
        5usize,
        concat!("Size of: ", stringify!(GLB_MU_PLL_CFG_BASIC_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<GLB_MU_PLL_CFG_BASIC_Type>(),
        1usize,
        concat!("Alignment of ", stringify!(GLB_MU_PLL_CFG_BASIC_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllRefdivRatio) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_MU_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllRefdivRatio)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllSelSampleClk) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_MU_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllSelSampleClk)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllVcoSpeed) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_MU_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllVcoSpeed)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllEvenDivEn) as usize - ptr as usize },
        3usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_MU_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllEvenDivEn)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllEvenDivRatio) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_MU_PLL_CFG_BASIC_Type),
            "::",
            stringify!(clkpllEvenDivRatio)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GLB_MU_PLL_Cfg_Type {
    #[doc = "< pll basic configuration"]
    pub basicCfg: *const GLB_MU_PLL_CFG_BASIC_Type,
    #[doc = "< pll sdmin value"]
    pub clkpllSdmin: u32,
}
#[test]
fn bindgen_test_layout_GLB_MU_PLL_Cfg_Type() {
    const UNINIT: ::core::mem::MaybeUninit<GLB_MU_PLL_Cfg_Type> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<GLB_MU_PLL_Cfg_Type>(),
        16usize,
        concat!("Size of: ", stringify!(GLB_MU_PLL_Cfg_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<GLB_MU_PLL_Cfg_Type>(),
        8usize,
        concat!("Alignment of ", stringify!(GLB_MU_PLL_Cfg_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).basicCfg) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_MU_PLL_Cfg_Type),
            "::",
            stringify!(basicCfg)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).clkpllSdmin) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(GLB_MU_PLL_Cfg_Type),
            "::",
            stringify!(clkpllSdmin)
        )
    );
}
#[repr(u32)]
#[doc = "  @brief GLB CAM clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_CAM_CLK_Type {
    #[doc = "< Select XCLK as CAM clock"]
    GLB_CAM_CLK_XCLK = 0,
    #[doc = "< Select WIFIPLL_96M as CAM clock"]
    GLB_CAM_CLK_WIFIPLL_96M = 1,
    #[doc = "< Select CPUPLL_96M as CAM clock"]
    GLB_CAM_CLK_CPUPLL_100M = 2,
}
#[repr(u32)]
#[doc = "  @brief GLB SDH clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_SDH_CLK_Type {
    #[doc = "< Select WIFIPLL_96M as SDH clock"]
    GLB_SDH_CLK_WIFIPLL_96M = 0,
    #[doc = "< Select CPUPLL_100M as SDH clock"]
    GLB_SDH_CLK_CPUPLL_100M = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB UART sig swap group type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_UART_SIG_SWAP_GRP_Type {
    #[doc = "< SWAP UART SIG GROUP GPIO0  -  GPIO11"]
    GLB_UART_SIG_SWAP_GRP_GPIO0_GPIO11 = 0,
    #[doc = "< SWAP UART SIG GROUP GPIO12 -  GPIO23"]
    GLB_UART_SIG_SWAP_GRP_GPIO12_GPIO23 = 1,
    #[doc = "< SWAP UART SIG GROUP GPIO24 -  GPIO35"]
    GLB_UART_SIG_SWAP_GRP_GPIO24_GPIO35 = 2,
    #[doc = "< SWAP UART SIG GROUP GPIO36 -  GPIO45"]
    GLB_UART_SIG_SWAP_GRP_GPIO36_GPIO45 = 3,
}
#[repr(u32)]
#[doc = "  @brief GLB I2S output ref clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_I2S_OUT_REF_CLK_Type {
    #[doc = "< no output reference clock on I2S_0 ref_clock port"]
    GLB_I2S_OUT_REF_CLK_NONE = 0,
    #[doc = "< output reference clock on I2S_0 ref_clock port"]
    GLB_I2S_OUT_REF_CLK_SRC = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB DMA clock ID type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DMA_CLK_ID_Type {
    #[doc = "< DMA0 clock ID:channel 0"]
    GLB_DMA0_CLK_CH0 = 0,
    #[doc = "< DMA0 clock ID:channel 1"]
    GLB_DMA0_CLK_CH1 = 1,
    #[doc = "< DMA0 clock ID:channel 2"]
    GLB_DMA0_CLK_CH2 = 2,
    #[doc = "< DMA0 clock ID:channel 3"]
    GLB_DMA0_CLK_CH3 = 3,
    #[doc = "< DMA0 clock ID:channel 4"]
    GLB_DMA0_CLK_CH4 = 4,
    #[doc = "< DMA0 clock ID:channel 5"]
    GLB_DMA0_CLK_CH5 = 5,
    #[doc = "< DMA0 clock ID:channel 6"]
    GLB_DMA0_CLK_CH6 = 6,
    #[doc = "< DMA0 clock ID:channel 7"]
    GLB_DMA0_CLK_CH7 = 7,
    #[doc = "< DMA1 clock ID:channel 0"]
    GLB_DMA1_CLK_CH0 = 8,
    #[doc = "< DMA1 clock ID:channel 1"]
    GLB_DMA1_CLK_CH1 = 9,
    #[doc = "< DMA1 clock ID:channel 2"]
    GLB_DMA1_CLK_CH2 = 10,
    #[doc = "< DMA1 clock ID:channel 3"]
    GLB_DMA1_CLK_CH3 = 11,
}
#[repr(u32)]
#[doc = "  @brief GLB peripheral DMA type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_PERI_DMA_Type {
    #[doc = "< uart_rx"]
    GLB_PERI_DMA_UART0_RX = 0,
    #[doc = "< uart_tx"]
    GLB_PERI_DMA_UART0_TX = 1,
    #[doc = "< uart1_rx"]
    GLB_PERI_DMA_UART1_RX = 2,
    #[doc = "< uart1_tx"]
    GLB_PERI_DMA_UART1_TX = 3,
    #[doc = "< uart2_rx"]
    GLB_PERI_DMA_UART2_RX = 4,
    #[doc = "< uart2_tx"]
    GLB_PERI_DMA_UART2_TX = 5,
    #[doc = "< i2c_0_rx"]
    GLB_PERI_DMA_I2C_0_RX = 6,
    #[doc = "< i2c_0_tx"]
    GLB_PERI_DMA_I2C_0_TX = 7,
    #[doc = "< irtx_tx"]
    GLB_PERI_DMA_IRTX_TX = 8,
    #[doc = "< gpio_tx"]
    GLB_PERI_DMA_GPIO_TX = 9,
    #[doc = "< spi_rx"]
    GLB_PERI_DMA_SPI_RX = 10,
    #[doc = "< spi_tx"]
    GLB_PERI_DMA_SPI_TX = 11,
    #[doc = "< audio_rx"]
    GLB_PERI_DMA_AUDIO_RX = 12,
    #[doc = "< audio_tx"]
    GLB_PERI_DMA_AUDIO_TX = 13,
    #[doc = "< i2c_1_rx"]
    GLB_PERI_DMA_I2C_1_RX = 14,
    #[doc = "< i2c_1_tx"]
    GLB_PERI_DMA_I2C_1_TX = 15,
    #[doc = "< i2s_0_rx"]
    GLB_PERI_DMA_I2S_0_RX = 16,
    #[doc = "< i2s_0_tx"]
    GLB_PERI_DMA_I2S_0_TX = 17,
    #[doc = "< pdm_rx"]
    GLB_PERI_DMA_PDM_RX = 18,
    #[doc = "< padc"]
    GLB_PERI_DMA_PADC = 19,
    #[doc = "< gauge"]
    GLB_PERI_DMA_GAUGE = 20,
    #[doc = "< gpadc"]
    GLB_PERI_DMA_GPADC = 22,
    #[doc = "< gpdac_tx"]
    GLB_PERI_DMA_GPDAC_TX = 23,
}
#[repr(u32)]
#[doc = "  @brief GLB DMA CN selection type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_PERI_DMA_CN_SEL_Type {
    #[doc = "< peripheral DMA channel select DMA0"]
    GLB_PERI_DMA_CN_SEL_DMA0 = 0,
    #[doc = "< peripheral DMA channel select DMA1"]
    GLB_PERI_DMA_CN_SEL_DMA1 = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB clock source type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_IR_CLK_SRC_Type {
    #[doc = "< IR clock source select XCLK"]
    GLB_IR_CLK_SRC_XCLK = 0,
}
#[repr(u32)]
#[doc = "  @brief GLB flash clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_SFLASH_CLK_Type {
    #[doc = "< Select WIFIPLL 120M as flash clock"]
    GLB_SFLASH_CLK_120M_WIFIPLL = 0,
    #[doc = "< Select XTAL as flash clock"]
    GLB_SFLASH_CLK_XTAL = 1,
    #[doc = "< Select CPUPLL 100M as flash clock"]
    GLB_SFLASH_CLK_100M_CPUPLL = 2,
    #[doc = "< Select MUXPLL 80M as flash clock"]
    GLB_SFLASH_CLK_80M_MUXPLL = 3,
    #[doc = "< Select BCLK as flash clock"]
    GLB_SFLASH_CLK_BCLK = 4,
    #[doc = "< Select WIFIPLL 96M as flash clock"]
    GLB_SFLASH_CLK_96M_WIFIPLL = 5,
}
#[repr(u32)]
#[doc = "  @brief GLB I2C clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_I2C_CLK_Type {
    #[doc = "< Select bus clk as I2C clock"]
    GLB_I2C_CLK_BCLK = 0,
    #[doc = "< Select xclk as I2C clock"]
    GLB_I2C_CLK_XCLK = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB SPI clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_SPI_CLK_Type {
    #[doc = "< Select MCU MUXPLL 160M as SPI clock"]
    GLB_SPI_CLK_MCU_MUXPLL_160M = 0,
    #[doc = "< Select xclk as SPI clock"]
    GLB_SPI_CLK_XCLK = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB PWM1 io type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_PWM1_IO_SEL_Type {
    #[doc = "< Select pwm1 io single end"]
    GLB_PWM1_IO_SINGLE_END = 0,
    #[doc = "< Select pwm1 io differential end for BLDC"]
    GLB_PWM1_IO_DIFF_END = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB PWM2 io type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_PWM2_IO_SEL_Type {
    #[doc = "< Select pwm2 io single end"]
    GLB_PWM2_IO_SINGLE_END = 0,
    #[doc = "< Select pwm2 io single end BLDC"]
    GLB_PWM2_IO_SINGLE_END_BLDC = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB PDM io type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_PDM_IO_SEL_Type {
    #[doc = "< Select audio_top PDM"]
    GLB_PDM_IO_SEL_AUDIO_TOP = 0,
    #[doc = "< Select aupdm_top PDM"]
    GLB_PDM_IO_SEL_AUPDM_TOP = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB SPI pad action type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_SPI_PAD_ACT_AS_Type {
    #[doc = "< SPI pad act as slave"]
    GLB_SPI_PAD_ACT_AS_SLAVE = 0,
    #[doc = "< SPI pad act as master"]
    GLB_SPI_PAD_ACT_AS_MASTER = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB AHB software type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_AHB_MCU_SW_Type {
    GLB_AHB_MCU_SW_RSV0 = 0,
    GLB_AHB_MCU_SW_RSV1 = 1,
    GLB_AHB_MCU_SW_WIFI = 4,
    GLB_AHB_MCU_SW_BTDM = 8,
    GLB_AHB_MCU_SW_ZIGBEE = 9,
    GLB_AHB_MCU_SW_BLE2 = 10,
    GLB_AHB_MCU_SW_ZIGBEE2 = 11,
    GLB_AHB_MCU_SW_EMI_MISC = 16,
    GLB_AHB_MCU_SW_PSRAM0_CTRL = 17,
    GLB_AHB_MCU_SW_PSRAM1_CTRL = 18,
    GLB_AHB_MCU_SW_USB_EMAC = 19,
    GLB_AHB_MCU_SW_RSV20 = 20,
    GLB_AHB_MCU_SW_AUDIO = 21,
    GLB_AHB_MCU_SW_SDH = 22,
    GLB_AHB_MCU_SW_RSV23 = 23,
    GLB_AHB_MCU_SW_DMA2 = 24,
    GLB_AHB_MCU_SW_GLB = 32,
    GLB_AHB_MCU_SW_MIX = 33,
    GLB_AHB_MCU_SW_GPIP = 34,
    GLB_AHB_MCU_SW_SEC_DBG = 35,
    GLB_AHB_MCU_SW_SEC_ENG = 36,
    GLB_AHB_MCU_SW_TZ1 = 37,
    GLB_AHB_MCU_SW_TZ2 = 38,
    GLB_AHB_MCU_SW_EFUSE = 39,
    GLB_AHB_MCU_SW_CCI = 40,
    GLB_AHB_MCU_SW_MCU_PERI_BUS = 41,
    GLB_AHB_MCU_SW_RSV42 = 42,
    GLB_AHB_MCU_SW_SF = 43,
    GLB_AHB_MCU_SW_DMA = 44,
    GLB_AHB_MCU_SW_SDU = 45,
    GLB_AHB_MCU_SW_PDS = 46,
    GLB_AHB_MCU_SW_RSV47 = 47,
    GLB_AHB_MCU_SW_UART0 = 48,
    GLB_AHB_MCU_SW_UART1 = 49,
    GLB_AHB_MCU_SW_SPI = 50,
    GLB_AHB_MCU_SW_I2C = 51,
    GLB_AHB_MCU_SW_PWM = 52,
    GLB_AHB_MCU_SW_TIMER = 53,
    GLB_AHB_MCU_SW_IR_REMOTE = 54,
    GLB_AHB_MCU_SW_CHECKSUM = 55,
    GLB_AHB_MCU_SW_IPC = 56,
    GLB_AHB_MCU_SW_I2C1 = 57,
    GLB_AHB_MCU_SW_UART2 = 58,
    GLB_AHB_MCU_SW_I2S = 59,
    GLB_AHB_MCU_SW_AUPDM = 60,
    GLB_AHB_MCU_SW_LZ4 = 61,
    GLB_AHB_MCU_SW_RSV62 = 62,
    GLB_AHB_MCU_SW_RSV63 = 63,
    GLB_AHB_MCU_SW_PWRON_RST = 64,
    GLB_AHB_MCU_SW_CPU_RESET = 65,
    GLB_AHB_MCU_SW_SYS_RESET = 66,
    GLB_AHB_MCU_SW_PICO_RESET = 67,
    GLB_AHB_MCU_SW_CPU2_RESET = 68,
    GLB_AHB_MCU_SW_CHIP_RESET = 69,
    GLB_AHB_MCU_SW_WL_WDT_RESET_MM_EN = 70,
    GLB_AHB_MCU_SW_MMWDT2WL_RST_MSK = 71,
}
#[repr(u32)]
#[doc = "  @brief GLB AHB software type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_AHB_DSP_SW_Type {
    GLB_AHB_DSP_SW_REG_CTRL_SYS_RESET = 0,
    GLB_AHB_DSP_SW_REG_CTRL_PWRON_RST = 2,
    GLB_AHB_DSP_SW_REG_CTRL_MMCPU0_RESET = 8,
    GLB_AHB_DSP_SW_SWRST_MM_MISC = 32,
    GLB_AHB_DSP_SW_SWRST_DMA = 33,
    GLB_AHB_DSP_SW_SWRST_UART0 = 34,
    GLB_AHB_DSP_SW_SWRST_I2C0 = 35,
    GLB_AHB_DSP_SW_SWRST_I2C1 = 36,
    GLB_AHB_DSP_SW_SWRST_IPC = 37,
    GLB_AHB_DSP_SW_SWRST_DMA2D = 38,
    GLB_AHB_DSP_SW_SWRST_SPI = 40,
    GLB_AHB_DSP_SW_SWRST_TIMER = 41,
    GLB_AHB_DSP_SW_SWRST_I2S0 = 42,
    GLB_AHB_DSP_SW_SWRST_I2S1 = 43,
    GLB_AHB_DSP_SW_SWRST_PDM0 = 44,
    GLB_AHB_DSP_SW_SWRST_PDM1 = 45,
    GLB_AHB_DSP_SW_SWRST_PUHS = 47,
    GLB_AHB_DSP_SW_SWRST_SPP_MISC = 64,
    GLB_AHB_DSP_SW_SWRST_SPP_MAIN = 65,
    GLB_AHB_DSP_SW_SWRST_SPP_TSRC = 66,
    GLB_AHB_DSP_SW_SWRST_DP_TSRC = 67,
    GLB_AHB_DSP_SW_SWRST_NR3D_CTRL = 68,
    GLB_AHB_DSP_SW_SWRST_DVP2BUSA = 69,
    GLB_AHB_DSP_SW_SWRST_DVP2BUSB = 70,
    GLB_AHB_DSP_SW_SWRST_DVP2BUSC = 71,
    GLB_AHB_DSP_SW_SWRST_DVP2BUSD = 72,
    GLB_AHB_DSP_SW_SWRST_MIPI = 73,
    GLB_AHB_DSP_SW_SWRST_SPP_REG = 80,
    GLB_AHB_DSP_SW_SWRST_DVP2BUSE = 81,
    GLB_AHB_DSP_SW_SWRST_DVP2BUSF = 82,
    GLB_AHB_DSP_SW_SWRST_DVP2BUSG = 83,
    GLB_AHB_DSP_SW_SWRST_DVP2BUSH = 84,
    GLB_AHB_DSP_SW_SWRST_CODEC_MISC = 96,
    GLB_AHB_DSP_SW_SWRST_MJPEG = 97,
    GLB_AHB_DSP_SW_SWRST_H264 = 98,
    GLB_AHB_DSP_SW_SWRST_MJPEG_DEC = 99,
    GLB_AHB_DSP_SW_SWRST_CNN = 100,
    GLB_AHB_DSP_SW_SWRST_VRAM = 112,
    GLB_AHB_DSP_SW_RG_IS_RST_N = 128,
}
#[repr(u32)]
#[doc = "  @brief GLB dis reset type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DISRST_Type {
    GLB_DISRST_GPIP = 2,
    GLB_DISRST_SEC_ENG = 4,
    GLB_DISRST_CCI = 8,
    GLB_DISRST_SF = 11,
    GLB_DISRST_UART0 = 16,
    GLB_DISRST_UART1 = 17,
    GLB_DISRST_SPI = 18,
    GLB_DISRST_I2C0 = 19,
    GLB_DISRST_PWM = 20,
    GLB_DISRST_TIMER = 21,
    GLB_DISRST_IR_REMOTE = 22,
    GLB_DISRST_CHECKSUM = 23,
    GLB_DISRST_IPC = 24,
    GLB_DISRST_I2C1 = 25,
    GLB_DISRST_UART2 = 26,
}
#[repr(u32)]
#[doc = "  @brief GLB PKA clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_PKA_CLK_Type {
    #[doc = "< Select MCU_BCLK as PKA clock"]
    GLB_PKA_CLK_MCU_BCLK = 0,
    #[doc = "< Select MCU MUXPLL 160M as PKA clock"]
    GLB_PKA_CLK_MCU_MUXPLL_160M = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB MCU software system reset type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_MCU_SW_SYSTEM_Type {
    #[doc = "< mcu reset"]
    GLB_MCU_SW_SYSTEM_CTRL_MCU = 1,
    #[doc = "< lp reset"]
    GLB_MCU_SW_SYSTEM_CTRL_LP = 3,
}
#[repr(u32)]
#[doc = "  @brief BMX arb mode type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BMX_ARB_Type {
    #[doc = "< 0->round-robin"]
    BMX_ARB_ROUND_ROBIN = 0,
    #[doc = "< 1->fix"]
    BMX_ARB_FIX = 1,
}
#[repr(u32)]
#[doc = "  @brief BMX latch type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BMX_LATCH_Type {
    #[doc = "< 0->Latch first error"]
    BMX_LATCH_FIRST_ERROR = 0,
    #[doc = "< 1->Latch last error"]
    BMX_LATCH_LAST_ERROR = 1,
}
#[doc = "  @brief BMX configuration structure type definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BMX_TO_Cfg_Type {
    #[doc = "< 0->fix, 2->round-robin, 3->random"]
    pub arbMod: BMX_ARB_Type,
    #[doc = "< Bus timeout enable: detect slave no reaponse in 1024 cycles"]
    pub timeoutEn: u8,
}
#[test]
fn bindgen_test_layout_BMX_TO_Cfg_Type() {
    const UNINIT: ::core::mem::MaybeUninit<BMX_TO_Cfg_Type> = ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<BMX_TO_Cfg_Type>(),
        8usize,
        concat!("Size of: ", stringify!(BMX_TO_Cfg_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<BMX_TO_Cfg_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(BMX_TO_Cfg_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).arbMod) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(BMX_TO_Cfg_Type),
            "::",
            stringify!(arbMod)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).timeoutEn) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(BMX_TO_Cfg_Type),
            "::",
            stringify!(timeoutEn)
        )
    );
}
#[repr(u32)]
#[doc = "  @brief BMX bus err type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BMX_BUS_ERR_Type {
    #[doc = "< Bus trustzone decode error"]
    BMX_BUS_ERR_TRUSTZONE_DECODE = 0,
    #[doc = "< Bus addr decode error"]
    BMX_BUS_ERR_ADDR_DECODE = 1,
}
#[repr(u32)]
#[doc = "  @brief BMX bus err interrupt type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BMX_ERR_INT_Type {
    #[doc = "< BMX bus err interrupt"]
    BMX_ERR_INT_ERR = 0,
    #[doc = "< BMX bus err interrupt max num"]
    BMX_ERR_INT_ALL = 1,
}
#[repr(u32)]
#[doc = "  @brief BMX time out interrupt type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum BMX_TO_INT_Type {
    #[doc = "< BMX timeout interrupt"]
    BMX_TO_INT_TIMEOUT = 0,
    #[doc = "< BMX timeout interrupt max num"]
    BMX_TO_INT_ALL = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB eth ref clock out type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_ETH_REF_CLK_OUT_Type {
    #[doc = "< select outside 50MHz RMII ref clock"]
    GLB_ETH_REF_CLK_OUT_OUTSIDE_50M = 0,
    #[doc = "< select inside 50MHz RMII ref clock"]
    GLB_ETH_REF_CLK_OUT_INSIDE_50M = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB EM type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_EM_Type {
    #[doc = "< WRAM_160KB EM_0KB"]
    GLB_WRAM160KB_EM0KB = 0,
    #[doc = "< WRAM_144KB EM_16KB"]
    GLB_WRAM144KB_EM16KB = 1,
    #[doc = "< WRAM_128KB EM_32KB"]
    GLB_WRAM128KB_EM32KB = 2,
    #[doc = "< WRAM_112KB EM_48KB"]
    GLB_WRAM112KB_EM48KB = 3,
    #[doc = "< WRAM_96KB EM_64KB"]
    GLB_WRAM96KB_EM64KB = 4,
}
#[repr(u32)]
#[doc = "  @brief GLB ADC clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_ADC_CLK_Type {
    #[doc = "< use AUPLL as ADC clock"]
    GLB_ADC_CLK_AUPLL = 0,
    #[doc = "< use XCLK as ADC clock"]
    GLB_ADC_CLK_XCLK = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB DAC clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DAC_CLK_Type {
    #[doc = "< use 32M as DAC clock"]
    GLB_DAC_CLK_32M = 0,
    #[doc = "< use XCLK as DAC clock"]
    GLB_DAC_CLK_XCLK = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB chip clock input output type definition\n/\n/**\n  @brief GLB chip clock out 0 type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_CHIP_CLK_OUT_0_Type {
    #[doc = "< cam_ref_clk"]
    GLB_CHIP_CLK_OUT_0_CAM_REF_CLK = 0,
    #[doc = "< i2s_ref_clk out"]
    GLB_CHIP_CLK_OUT_0_I2S_REF_CLK = 1,
    #[doc = "< clk_adc"]
    GLB_CHIP_CLK_OUT_0_CLK_AUDIO_ADC = 2,
    #[doc = "< clk_dac"]
    GLB_CHIP_CLK_OUT_0_CLK_AUDIO_DAC = 3,
}
#[repr(u32)]
#[doc = "  @brief GLB chip clock out 1 type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_CHIP_CLK_OUT_1_Type {
    #[doc = "< no chip clock out"]
    GLB_CHIP_CLK_OUT_1_CAM_REF_CLK = 0,
    #[doc = "< i2s_ref_clk out"]
    GLB_CHIP_CLK_OUT_1_I2S_REF_CLK = 1,
    #[doc = "< clk_adc_in_128fs"]
    GLB_CHIP_CLK_OUT_1_CLK_AUDIO_ADC = 2,
    #[doc = "< clk_dac_in_128fs"]
    GLB_CHIP_CLK_OUT_1_CLK_AUDIO_DAC = 3,
}
#[repr(u32)]
#[doc = "  @brief GLB chip clock out 2 type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_CHIP_CLK_OUT_2_Type {
    #[doc = "< cam_ref_clk"]
    GLB_CHIP_CLK_OUT_2_CAM_REF_CLK = 0,
    #[doc = "< i2s_ref_clk"]
    GLB_CHIP_CLK_OUT_2_I2S_REF_CLK = 1,
    #[doc = "< ana_xtal_clk"]
    GLB_CHIP_CLK_OUT_2_ANA_XTAL_CLK = 2,
    #[doc = "< pll_32m_clk"]
    GLB_CHIP_CLK_OUT_2_PLL_32M_CLK = 3,
}
#[repr(u32)]
#[doc = "  @brief GLB chip clock out 3 type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_CHIP_CLK_OUT_3_Type {
    #[doc = "< no chip clock out"]
    GLB_CHIP_CLK_OUT_3_CAM_REF_CLK = 0,
    #[doc = "< i2s_ref_clk out"]
    GLB_CHIP_CLK_OUT_3_I2S_REF_CLK = 1,
    #[doc = "< no clock out"]
    GLB_CHIP_CLK_OUT_3_NONE = 2,
    #[doc = "< pll_48m_clk"]
    GLB_CHIP_CLK_OUT_3_PLL_48M_CLK = 3,
}
#[repr(u32)]
#[doc = "  @brief GLB CSI DSI clock source select type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_CSI_DSI_CLK_SEL_Type {
    #[doc = "< xtal_clk"]
    GLB_CSI_DSI_CLK_SEL_XTAL_CLK = 0,
    #[doc = "< cpupll_div10"]
    GLB_CSI_DSI_CLK_SEL_CPUPLL_DIV10 = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB DIG clock source select type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DIG_CLK_Type {
    #[doc = "< select WIFIPLL 32M as DIG clock source"]
    GLB_DIG_CLK_WIFIPLL_32M = 0,
    #[doc = "< select XCLK as DIG clock source"]
    GLB_DIG_CLK_XCLK = 1,
    #[doc = "< select AUPLL as DIG clock source"]
    GLB_DIG_CLK_AUPLL = 2,
}
#[repr(u32)]
#[doc = "  @brief GLB 512K clock out select type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_512K_CLK_OUT_Type {
    #[doc = "< select 512K clock out"]
    GLB_512K_CLK_OUT_512K = 0,
    #[doc = "< select 256K clock out"]
    GLB_512K_CLK_OUT_256K = 1,
    #[doc = "< select 128K clock out"]
    GLB_512K_CLK_OUT_128K = 2,
}
#[repr(u32)]
#[doc = "  @brief GLB BT bandwidth type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_BT_BANDWIDTH_Type {
    #[doc = "< BT bandwidth 1MHz"]
    GLB_BT_BANDWIDTH_1M = 0,
    #[doc = "< BT bandwidth 2MHz"]
    GLB_BT_BANDWIDTH_2M = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB UART2 IO selection type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_UART2_IO_SEL_Type {
    #[doc = "< Select UART2 function"]
    GLB_UART2_IO_SEL_UART2 = 0,
    #[doc = "< Select ISO11898 function"]
    GLB_UART2_IO_SEL_ISO11898 = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB UART signal type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_UART_SIG_Type {
    #[doc = "< UART signal 0"]
    GLB_UART_SIG_0 = 0,
    #[doc = "< UART signal 1"]
    GLB_UART_SIG_1 = 1,
    #[doc = "< UART signal 2"]
    GLB_UART_SIG_2 = 2,
    #[doc = "< UART signal 3"]
    GLB_UART_SIG_3 = 3,
    #[doc = "< UART signal 4"]
    GLB_UART_SIG_4 = 4,
    #[doc = "< UART signal 5"]
    GLB_UART_SIG_5 = 5,
    #[doc = "< UART signal 6"]
    GLB_UART_SIG_6 = 6,
    #[doc = "< UART signal 7"]
    GLB_UART_SIG_7 = 7,
    #[doc = "< UART signal 8"]
    GLB_UART_SIG_8 = 8,
    #[doc = "< UART signal 9"]
    GLB_UART_SIG_9 = 9,
    #[doc = "< UART signal 10"]
    GLB_UART_SIG_10 = 10,
    #[doc = "< UART signal 11"]
    GLB_UART_SIG_11 = 11,
}
#[repr(u32)]
#[doc = "  @brief GLB UART signal  function type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_UART_SIG_FUN_Type {
    #[doc = "< UART funtion: UART 0 RTS"]
    GLB_UART_SIG_FUN_UART0_RTS = 0,
    #[doc = "< UART funtion: UART 0 CTS"]
    GLB_UART_SIG_FUN_UART0_CTS = 1,
    #[doc = "< UART funtion: UART 0 TXD"]
    GLB_UART_SIG_FUN_UART0_TXD = 2,
    #[doc = "< UART funtion: UART 0 RXD"]
    GLB_UART_SIG_FUN_UART0_RXD = 3,
    #[doc = "< UART funtion: UART 1 RTS"]
    GLB_UART_SIG_FUN_UART1_RTS = 4,
    #[doc = "< UART funtion: UART 1 CTS"]
    GLB_UART_SIG_FUN_UART1_CTS = 5,
    #[doc = "< UART funtion: UART 1 TXD"]
    GLB_UART_SIG_FUN_UART1_TXD = 6,
    #[doc = "< UART funtion: UART 1 RXD"]
    GLB_UART_SIG_FUN_UART1_RXD = 7,
    #[doc = "< UART funtion: UART 2 RTS"]
    GLB_UART_SIG_FUN_UART2_RTS = 8,
    #[doc = "< UART funtion: UART 2 CTS"]
    GLB_UART_SIG_FUN_UART2_CTS = 9,
    #[doc = "< UART funtion: UART 2 TXD"]
    GLB_UART_SIG_FUN_UART2_TXD = 10,
    #[doc = "< UART funtion: UART 2 RXD"]
    GLB_UART_SIG_FUN_UART2_RXD = 11,
}
#[repr(u32)]
#[doc = "  @brief XTAL type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_XTAL_Type {
    #[doc = "< XTAL is none"]
    GLB_XTAL_NONE = 0,
    #[doc = "< XTAL is 24M"]
    GLB_XTAL_24M = 1,
    #[doc = "< XTAL is 32M"]
    GLB_XTAL_32M = 2,
    #[doc = "< XTAL is 38.4M"]
    GLB_XTAL_38P4M = 3,
    #[doc = "< XTAL is 40M"]
    GLB_XTAL_40M = 4,
    #[doc = "< XTAL is 26M"]
    GLB_XTAL_26M = 5,
    #[doc = "< XTAL is RC32M"]
    GLB_XTAL_RC32M = 6,
    #[doc = "< type max num"]
    GLB_XTAL_MAX = 7,
}
impl GLB_PLL_Type {
    #[doc = "< power on xtal and pll"]
    pub const GLB_PLL_NONE: GLB_PLL_Type = GLB_PLL_Type(0);
}
impl GLB_PLL_Type {
    #[doc = "< power on WIFIPLL"]
    pub const GLB_PLL_WIFIPLL: GLB_PLL_Type = GLB_PLL_Type(1);
}
impl GLB_PLL_Type {
    #[doc = "< power on AUPLL"]
    pub const GLB_PLL_AUPLL: GLB_PLL_Type = GLB_PLL_Type(2);
}
impl GLB_PLL_Type {
    #[doc = "< power on CPUPLL"]
    pub const GLB_PLL_CPUPLL: GLB_PLL_Type = GLB_PLL_Type(4);
}
impl GLB_PLL_Type {
    #[doc = "< power on ETHPLL"]
    pub const GLB_PLL_MIPIPLL: GLB_PLL_Type = GLB_PLL_Type(8);
}
impl GLB_PLL_Type {
    #[doc = "< power on ETHPLL"]
    pub const GLB_PLL_UHSPLL: GLB_PLL_Type = GLB_PLL_Type(16);
}
impl ::core::ops::BitOr<GLB_PLL_Type> for GLB_PLL_Type {
    type Output = Self;
    #[inline]
    fn bitor(self, other: Self) -> Self {
        GLB_PLL_Type(self.0 | other.0)
    }
}
impl ::core::ops::BitOrAssign for GLB_PLL_Type {
    #[inline]
    fn bitor_assign(&mut self, rhs: GLB_PLL_Type) {
        self.0 |= rhs.0;
    }
}
impl ::core::ops::BitAnd<GLB_PLL_Type> for GLB_PLL_Type {
    type Output = Self;
    #[inline]
    fn bitand(self, other: Self) -> Self {
        GLB_PLL_Type(self.0 & other.0)
    }
}
impl ::core::ops::BitAndAssign for GLB_PLL_Type {
    #[inline]
    fn bitand_assign(&mut self, rhs: GLB_PLL_Type) {
        self.0 &= rhs.0;
    }
}
#[repr(transparent)]
#[doc = "  @brief PLL power on type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub struct GLB_PLL_Type(pub ::core::ffi::c_uint);
#[repr(u32)]
#[doc = "  @brief WAC PLL XTAL type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_WAC_PLL_Type {
    #[doc = "< wifi pll"]
    GLB_WAC_PLL_WIFIPLL = 0,
    #[doc = "< audio pll"]
    GLB_WAC_PLL_AUPLL = 1,
    #[doc = "< cpu pll"]
    GLB_WAC_PLL_CPUPLL = 2,
}
#[repr(u32)]
#[doc = "  @brief MU PLL XTAL type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_MU_PLL_Type {
    #[doc = "< mipi pll"]
    GLB_MU_PLL_MIPIPLL = 0,
    #[doc = "< uhs pll"]
    GLB_MU_PLL_UHSPLL = 1,
}
#[repr(u32)]
#[doc = "  @brief DISP clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DISP_CLK_Type {
    #[doc = "< mipi pll 1500M"]
    GLB_DISP_CLK_MIPIPLL_1500M = 0,
}
#[repr(u32)]
#[doc = "  @brief PLL XTAL type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_PSRAM_PLL_Type {
    #[doc = "< emi_cpupll_400m_clk"]
    GLB_PSRAM_EMI_CPUPLL_400M = 0,
    #[doc = "< emi_wifipll_320m_clk"]
    GLB_PSRAM_EMI_WIFIPLL_320M = 1,
    #[doc = "< emi_aupll_div1_clk"]
    GLB_PSRAM_EMI_AUPLL_DIV1 = 2,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP xclk clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_XCLK_Type {
    #[doc = "< use RC32M as xclk clock"]
    GLB_DSP_XCLK_RC32M = 0,
    #[doc = "< use XTAL as xclk clock"]
    GLB_DSP_XCLK_XTAL = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP root clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_ROOT_CLK_Type {
    #[doc = "< use XCLK as root clock"]
    GLB_DSP_ROOT_CLK_XCLK = 0,
    #[doc = "< use PLL as root clock"]
    GLB_DSP_ROOT_CLK_PLL = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP pbroot clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_PBROOT_CLK_Type {
    #[doc = "< use mm_xclk as pbroot clock"]
    GLB_DSP_PBROOT_CLK_MM_XCLK = 0,
    #[doc = "< use mm_muxpll_160m_clk as pbroot clock"]
    GLB_DSP_PBROOT_CLK_MM_MUXPLL_160M = 1,
    #[doc = "< use mm_muxpll_240m_clk as pbroot clock"]
    GLB_DSP_PBROOT_CLK_MM_MUXPLL_240M = 2,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP PLL clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_PLL_CLK_Type {
    #[doc = "< select DSP PLL output muxpll 240m as cpu clock"]
    GLB_DSP_PLL_CLK_MUXPLL_240M = 0,
    #[doc = "< select DSP PLL output muxpll 320m as cpu clock"]
    GLB_DSP_PLL_CLK_MUXPLL_320M = 1,
    #[doc = "< select DSP PLL output cpupll 400m as cpu clock"]
    GLB_DSP_PLL_CLK_CPUPLL_400M = 2,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP UART clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_UART_CLK_Type {
    #[doc = "< Select dsp pbclk as UART clock"]
    GLB_DSP_UART_CLK_DSP_PBCLK = 0,
    #[doc = "< Select muxpll 160m as UART clock"]
    GLB_DSP_UART_CLK_MUXPLL_160M = 1,
    #[doc = "< Select xclk as UART clock"]
    GLB_DSP_UART_CLK_DSP_XCLK = 2,
}
#[repr(u32)]
#[doc = "  @brief GLB UART clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_UART_CLK_Type {
    #[doc = "< Select bclk clock as UART clock"]
    GLB_UART_CLK_BCLK = 0,
    #[doc = "< Select PLL 160M as UART clock"]
    GLB_UART_CLK_PLL_160M = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP CNN clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_CNN_CLK_Type {
    #[doc = "< Select 160M as CNN clock"]
    GLB_DSP_CNN_CLK_160M = 0,
    #[doc = "< Select 240M as CNN clock"]
    GLB_DSP_CNN_CLK_240M = 1,
    #[doc = "< Select 320M as CNN clock"]
    GLB_DSP_CNN_CLK_320M = 2,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP DP clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_DP_CLK_Type {
    #[doc = "< Select display pll as DP clock"]
    GLB_DSP_DP_CLK_DISPLAY_PLL = 0,
    #[doc = "< Select mm xclk as DP clock"]
    GLB_DSP_DP_CLK_DSP_XCLK = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP SPP clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_SPP_CLK_Type {
    #[doc = "< Select muxpll 160M as SPP clock"]
    GLB_DSP_SPP_CLK_MUXPLL_160M = 0,
    #[doc = "< Select muxpll 240M as SPP clock"]
    GLB_DSP_SPP_CLK_MUXPLL_240M = 1,
    #[doc = "< Select cpupll 400M as SPP clock"]
    GLB_DSP_SPP_CLK_CPUPLL_400M = 2,
    #[doc = "< Select dsp xclk as SPP clock"]
    GLB_DSP_SPP_CLK_DSP_XCLK = 3,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP H264 clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_H264_CLK_Type {
    #[doc = "< Select dsp muxpll 160M as SPP clock"]
    GLB_DSP_H264_DSP_MUXPLL_160M = 0,
    #[doc = "< Select dsp muxpll 240M as SPP clock"]
    GLB_DSP_H264_DSP_MUXPLL_240M = 1,
    #[doc = "< Select dsp muxpll 320M as SPP clock"]
    GLB_DSP_H264_DSP_MUXPLL_320M = 2,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP SPI clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_SPI_CLK_Type {
    #[doc = "< Select muxpll 160M as SPI clock"]
    GLB_DSP_SPI_CLK_DSP_MUXPLL_160M = 0,
    #[doc = "< Select xclk as SPI clock"]
    GLB_DSP_SPI_CLK_DSP_XCLK = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP I2C clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_I2C_CLK_Type {
    #[doc = "< Select dsp pbclk as I2C clock"]
    GLB_DSP_I2C_CLK_DSP_PBCLK = 0,
    #[doc = "< Select xclk as I2C clock"]
    GLB_DSP_I2C_CLK_XCLK = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB I2S di ref clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_I2S_DI_REF_CLK_Type {
    #[doc = "< Select i2s_di input"]
    GLB_I2S_DI_SEL_I2S_DI_INPUT = 0,
    #[doc = "< Select i2s_ref_clk output"]
    GLB_I2S_DI_SEL_I2S_REF_OUTPUT = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB I2S do ref clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_I2S_DO_REF_CLK_Type {
    #[doc = "< Select i2s_do output"]
    GLB_I2S_DO_SEL_I2S_DO_OUTPT = 0,
    #[doc = "< Select i2s_ref_clk output"]
    GLB_I2S_DO_SEL_I2S_REF_OUTPUT = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB EMI clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_EMI_CLK_Type {
    #[doc = "< mcu_pbclk"]
    GLB_EMI_CLK_MCU_PBCLK = 0,
    #[doc = "< cpupll_200m_clk"]
    GLB_EMI_CLK_CPUPLL_200M_CLK = 1,
    #[doc = "< wifipll_320m_clk"]
    GLB_EMI_CLK_WIFIPLL_320M_CLK = 2,
    #[doc = "< cpupll_400m_clk"]
    GLB_EMI_CLK_CPUPLL_400M_CLK = 3,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP sw system type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_SW_SYSTEM_Type {
    #[doc = "< SW system reset(pulse trigger)"]
    GLB_DSP_SW_SYSTEM_CTRL_SYS = 0,
    #[doc = "< SW power-on reset (pulse trigger)"]
    GLB_DSP_SW_SYSTEM_CTRL_PWRON = 2,
    #[doc = "< MMCPU0 reset(pulse trigger)"]
    GLB_DSP_SW_SYSTEM_CTRL_DSP0 = 8,
    #[doc = "< MMCPU1 reset(pulse trigger)"]
    GLB_DSP_SW_SYSTEM_CTRL_DSP1 = 9,
    #[doc = "< wl2mm"]
    GLB_DSP_SW_SYSTEM_CTRL_WL2MM = 15,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP peripheral type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_PERIPHERAL_Type {
    #[doc = "< mm_misc"]
    GLB_DSP_PERIPHERAL_MM_MISC = 0,
    #[doc = "< dma"]
    GLB_DSP_PERIPHERAL_DMA = 1,
    #[doc = "< uart0"]
    GLB_DSP_PERIPHERAL_UART0 = 2,
    #[doc = "< i2c0"]
    GLB_DSP_PERIPHERAL_I2C0 = 3,
    #[doc = "< ipc"]
    GLB_DSP_PERIPHERAL_IPC = 5,
    #[doc = "< spi"]
    GLB_DSP_PERIPHERAL_SPI = 8,
    #[doc = "< timer"]
    GLB_DSP_PERIPHERAL_TIMER = 9,
    #[doc = "< i2s0"]
    GLB_DSP_PERIPHERAL_I2S0 = 10,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP spp sub type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_SPP_SUB_Type {
    #[doc = "< spp_misc"]
    GLB_DSP_SPP_SUB_SPP_MISC = 0,
    #[doc = "< dvp2busA"]
    GLB_DSP_SPP_SUB_DVP2BUSA = 1,
    #[doc = "< dvp2busB"]
    GLB_DSP_SPP_SUB_DVP2BUSB = 2,
    #[doc = "< dvp2busC"]
    GLB_DSP_SPP_SUB_DVP2BUSC = 3,
    #[doc = "< osd_draw"]
    GLB_DSP_SPP_SUB_OSD_DRAW = 4,
    #[doc = "< dspplay"]
    GLB_DSP_SPP_SUB_DP = 5,
    #[doc = "< img_pr scaler/yuv2rgb"]
    GLB_DSP_SPP_SUB_IMG_PR = 16,
    #[doc = "< ScalerA"]
    GLB_DSP_SPP_SUB_SCLRA = 17,
    #[doc = "< ScalerB"]
    GLB_DSP_SPP_SUB_SCLRB = 18,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP codec sub type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_CODEC_SUB_Type {
    #[doc = "< mjpeg"]
    GLB_DSP_CODEC_SUB_MJPEG = 1,
    #[doc = "< BLAI"]
    GLB_DSP_CODEC_SUB_CNN = 2,
    #[doc = "< vram control logic(SRAM content would not be reset)"]
    GLB_DSP_CODEC_SUB_VRAM = 16,
}
#[repr(u32)]
#[doc = "  @brief GLB DSP image sensor type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_DSP_IMAGE_SENSOR_Type {
    #[doc = "< Image sensor"]
    GLB_DSP_IMAGE_SENSOR_RG_IS = 1,
}
#[repr(u32)]
#[doc = "  @brief GLB LDO15CIS level type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum GLB_LDO15CIS_LEVEL_Type {
    #[doc = "< GLB LDO15CIS voltage 1.00V"]
    GLB_LDO15CIS_LEVEL_1P00V = 0,
    #[doc = "< GLB LDO15CIS voltage 1.05V"]
    GLB_LDO15CIS_LEVEL_1P05V = 1,
    #[doc = "< GLB LDO15CIS voltage 1.10V"]
    GLB_LDO15CIS_LEVEL_1P10V = 2,
    #[doc = "< GLB LDO15CIS voltage 1.15V"]
    GLB_LDO15CIS_LEVEL_1P15V = 3,
    #[doc = "< GLB LDO15CIS voltage 1.20V"]
    GLB_LDO15CIS_LEVEL_1P20V = 4,
    #[doc = "< GLB LDO15CIS voltage 1.30V"]
    GLB_LDO15CIS_LEVEL_1P30V = 5,
    #[doc = "< GLB LDO15CIS voltage 1.40V"]
    GLB_LDO15CIS_LEVEL_1P40V = 6,
    #[doc = "< GLB LDO15CIS voltage 1.45V"]
    GLB_LDO15CIS_LEVEL_1P45V = 7,
    #[doc = "< GLB LDO15CIS voltage 1.50V"]
    GLB_LDO15CIS_LEVEL_1P50V = 8,
    #[doc = "< GLB LDO15CIS voltage 1.55V"]
    GLB_LDO15CIS_LEVEL_1P55V = 9,
    #[doc = "< GLB LDO15CIS voltage 1.60V"]
    GLB_LDO15CIS_LEVEL_1P60V = 10,
    #[doc = "< GLB LDO15CIS voltage 1.65V"]
    GLB_LDO15CIS_LEVEL_1P65V = 11,
    #[doc = "< GLB LDO15CIS voltage 1.70V"]
    GLB_LDO15CIS_LEVEL_1P70V = 12,
    #[doc = "< GLB LDO15CIS voltage 1.75V"]
    GLB_LDO15CIS_LEVEL_1P75V = 13,
    #[doc = "< GLB LDO15CIS voltage 1.80V"]
    GLB_LDO15CIS_LEVEL_1P80V = 14,
    #[doc = "< GLB LDO15CIS voltage 1.85V"]
    GLB_LDO15CIS_LEVEL_1P85V = 15,
}
