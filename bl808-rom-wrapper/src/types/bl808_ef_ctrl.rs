/* automatically generated by rust-bindgen 0.63.0 */

#[repr(C)]
#[derive(Copy, Clone, Debug, Default, Eq, Hash, Ord, PartialEq, PartialOrd)]
pub struct __BindgenBitfieldUnit<Storage> {
    storage: Storage,
}
impl<Storage> __BindgenBitfieldUnit<Storage> {
    #[inline]
    pub const fn new(storage: Storage) -> Self {
        Self { storage }
    }
}
impl<Storage> __BindgenBitfieldUnit<Storage>
where
    Storage: AsRef<[u8]> + AsMut<[u8]>,
{
    #[inline]
    pub fn get_bit(&self, index: usize) -> bool {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = self.storage.as_ref()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        byte & mask == mask
    }
    #[inline]
    pub fn set_bit(&mut self, index: usize, val: bool) {
        debug_assert!(index / 8 < self.storage.as_ref().len());
        let byte_index = index / 8;
        let byte = &mut self.storage.as_mut()[byte_index];
        let bit_index = if cfg!(target_endian = "big") {
            7 - (index % 8)
        } else {
            index % 8
        };
        let mask = 1 << bit_index;
        if val {
            *byte |= mask;
        } else {
            *byte &= !mask;
        }
    }
    #[inline]
    pub fn get(&self, bit_offset: usize, bit_width: u8) -> u64 {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        let mut val = 0;
        for i in 0..(bit_width as usize) {
            if self.get_bit(i + bit_offset) {
                let index = if cfg!(target_endian = "big") {
                    bit_width as usize - 1 - i
                } else {
                    i
                };
                val |= 1 << index;
            }
        }
        val
    }
    #[inline]
    pub fn set(&mut self, bit_offset: usize, bit_width: u8, val: u64) {
        debug_assert!(bit_width <= 64);
        debug_assert!(bit_offset / 8 < self.storage.as_ref().len());
        debug_assert!((bit_offset + (bit_width as usize)) / 8 <= self.storage.as_ref().len());
        for i in 0..(bit_width as usize) {
            let mask = 1 << i;
            let val_bit_is_set = val & mask == mask;
            let index = if cfg!(target_endian = "big") {
                bit_width as usize - 1 - i
            } else {
                i
            };
            self.set_bit(index + bit_offset, val_bit_is_set);
        }
    }
}
#[repr(u32)]
#[doc = "  @brief Efuse Ctrl key slot type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EF_Ctrl_Key_Type {
    #[doc = "< key slot 0"]
    EF_CTRL_KEY_SLOT0 = 0,
    #[doc = "< key slot 1"]
    EF_CTRL_KEY_SLOT1 = 1,
    #[doc = "< key slot 2"]
    EF_CTRL_KEY_SLOT2 = 2,
    #[doc = "< key slot 3"]
    EF_CTRL_KEY_SLOT3 = 3,
    #[doc = "< key slot 4"]
    EF_CTRL_KEY_SLOT4 = 4,
    #[doc = "< key slot 5"]
    EF_CTRL_KEY_SLOT5 = 5,
    #[doc = "<"]
    EF_CTRL_KEY_MAX = 6,
}
#[repr(u32)]
#[doc = "  @brief Efuse Ctrl sign type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EF_Ctrl_Sign_Type {
    #[doc = "< no sign"]
    EF_CTRL_SIGN_NONE = 0,
    #[doc = "< use RSA to sign"]
    EF_CTRL_SIGN_RSA = 1,
    #[doc = "< use ECC to sign"]
    EF_CTRL_SIGN_ECC = 2,
}
#[repr(u32)]
#[doc = "  @brief Efuse Ctrl flash AES type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EF_Ctrl_SF_AES_Type {
    #[doc = "< No AES"]
    EF_CTRL_SF_AES_NONE = 0,
    #[doc = "< AES 128"]
    EF_CTRL_SF_AES_128 = 1,
    #[doc = "< AES 192"]
    EF_CTRL_SF_AES_192 = 2,
    #[doc = "< AES 256"]
    EF_CTRL_SF_AES_256 = 3,
}
#[repr(u32)]
#[doc = "  @brief Efuse Ctrl Dbg type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EF_Ctrl_Dbg_Mode_Type {
    #[doc = "< Open debug"]
    EF_CTRL_DBG_OPEN = 0,
    #[doc = "< Open debug with password"]
    EF_CTRL_DBG_PASSWORD = 1,
    #[doc = "< Close debug"]
    EF_CTRL_DBG_CLOSE = 4,
}
#[repr(u32)]
#[doc = "  @brief Efuse Ctrl clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EF_Ctrl_CLK_Type {
    #[doc = "< Select efuse clock"]
    EF_CTRL_EF_CLK = 0,
    #[doc = "< Select SAHB clock"]
    EF_CTRL_SAHB_CLK = 1,
}
#[repr(u32)]
#[doc = "  @brief Efuse Ctrl clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EF_Ctrl_CYC_PARA_Type {
    #[doc = "< Select default cyc parameter"]
    EF_CTRL_PARA_DFT = 0,
    #[doc = "< Select manual cyc parameter"]
    EF_CTRL_PARA_MANUAL = 1,
}
#[repr(u32)]
#[doc = "  @brief Efuse Ctrl clock type definition"]
#[derive(Debug, Copy, Clone, Hash, PartialEq, Eq)]
pub enum EF_Ctrl_OP_MODE_Type {
    #[doc = "< Select efuse program auto mode"]
    EF_CTRL_OP_MODE_AUTO = 0,
    #[doc = "< Select efuse program manual mode"]
    EF_CTRL_OP_MODE_MANUAL = 1,
}
#[doc = "  @brief Efuse Ctrl secure configuration structure type definition"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EF_Ctrl_Sec_Param_Type {
    #[doc = "< Efuse debug mode"]
    pub ef_dbg_mode: EF_Ctrl_Dbg_Mode_Type,
    #[doc = "< Jtag debug disable config value"]
    pub ef_dbg_jtag_0_dis: u8,
    #[doc = "< Jtag debug disable config value"]
    pub ef_dbg_jtag_1_dis: u8,
    #[doc = "< Secure boot enable config value"]
    pub ef_sboot_en: u8,
}
#[test]
fn bindgen_test_layout_EF_Ctrl_Sec_Param_Type() {
    const UNINIT: ::core::mem::MaybeUninit<EF_Ctrl_Sec_Param_Type> =
        ::core::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::core::mem::size_of::<EF_Ctrl_Sec_Param_Type>(),
        8usize,
        concat!("Size of: ", stringify!(EF_Ctrl_Sec_Param_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<EF_Ctrl_Sec_Param_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(EF_Ctrl_Sec_Param_Type))
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ef_dbg_mode) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(EF_Ctrl_Sec_Param_Type),
            "::",
            stringify!(ef_dbg_mode)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ef_dbg_jtag_0_dis) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(EF_Ctrl_Sec_Param_Type),
            "::",
            stringify!(ef_dbg_jtag_0_dis)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ef_dbg_jtag_1_dis) as usize - ptr as usize },
        5usize,
        concat!(
            "Offset of field: ",
            stringify!(EF_Ctrl_Sec_Param_Type),
            "::",
            stringify!(ef_dbg_jtag_1_dis)
        )
    );
    assert_eq!(
        unsafe { ::core::ptr::addr_of!((*ptr).ef_sboot_en) as usize - ptr as usize },
        6usize,
        concat!(
            "Offset of field: ",
            stringify!(EF_Ctrl_Sec_Param_Type),
            "::",
            stringify!(ef_sboot_en)
        )
    );
}
#[doc = "  @brief Efuse analog dcdc11 trim type definition"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Efuse_Ana_DCDC11_Trim_Type {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Efuse_Ana_DCDC11_Trim_Type() {
    assert_eq!(
        ::core::mem::size_of::<Efuse_Ana_DCDC11_Trim_Type>(),
        4usize,
        concat!("Size of: ", stringify!(Efuse_Ana_DCDC11_Trim_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<Efuse_Ana_DCDC11_Trim_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(Efuse_Ana_DCDC11_Trim_Type))
    );
}
impl Efuse_Ana_DCDC11_Trim_Type {
    #[inline]
    pub fn trimDcdc11VoutAon(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_trimDcdc11VoutAon(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn trimDcdc11VoutAonParity(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimDcdc11VoutAonParity(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trimDcdc11VoutAonEn(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimDcdc11VoutAonEn(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        trimDcdc11VoutAon: u32,
        trimDcdc11VoutAonParity: u32,
        trimDcdc11VoutAonEn: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let trimDcdc11VoutAon: u32 = unsafe { ::core::mem::transmute(trimDcdc11VoutAon) };
            trimDcdc11VoutAon as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let trimDcdc11VoutAonParity: u32 =
                unsafe { ::core::mem::transmute(trimDcdc11VoutAonParity) };
            trimDcdc11VoutAonParity as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let trimDcdc11VoutAonEn: u32 = unsafe { ::core::mem::transmute(trimDcdc11VoutAonEn) };
            trimDcdc11VoutAonEn as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "  @brief Efuse analog dcdc18 trim type definition"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Efuse_Ana_DCDC18_Trim_Type {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Efuse_Ana_DCDC18_Trim_Type() {
    assert_eq!(
        ::core::mem::size_of::<Efuse_Ana_DCDC18_Trim_Type>(),
        4usize,
        concat!("Size of: ", stringify!(Efuse_Ana_DCDC18_Trim_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<Efuse_Ana_DCDC18_Trim_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(Efuse_Ana_DCDC18_Trim_Type))
    );
}
impl Efuse_Ana_DCDC18_Trim_Type {
    #[inline]
    pub fn trimDcdc18VoutAon(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_trimDcdc18VoutAon(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn trimDcdc18VoutAonParity(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimDcdc18VoutAonParity(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trimDcdc18VoutAonEn(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimDcdc18VoutAonEn(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        trimDcdc18VoutAon: u32,
        trimDcdc18VoutAonParity: u32,
        trimDcdc18VoutAonEn: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let trimDcdc18VoutAon: u32 = unsafe { ::core::mem::transmute(trimDcdc18VoutAon) };
            trimDcdc18VoutAon as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let trimDcdc18VoutAonParity: u32 =
                unsafe { ::core::mem::transmute(trimDcdc18VoutAonParity) };
            trimDcdc18VoutAonParity as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let trimDcdc18VoutAonEn: u32 = unsafe { ::core::mem::transmute(trimDcdc18VoutAonEn) };
            trimDcdc18VoutAonEn as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "  @brief Efuse analog ldo18flash trim type definition"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Efuse_Ana_LDO18FLASH_Trim_Type {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Efuse_Ana_LDO18FLASH_Trim_Type() {
    assert_eq!(
        ::core::mem::size_of::<Efuse_Ana_LDO18FLASH_Trim_Type>(),
        4usize,
        concat!("Size of: ", stringify!(Efuse_Ana_LDO18FLASH_Trim_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<Efuse_Ana_LDO18FLASH_Trim_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(Efuse_Ana_LDO18FLASH_Trim_Type))
    );
}
impl Efuse_Ana_LDO18FLASH_Trim_Type {
    #[inline]
    pub fn trimLdo18flashVoutAon(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_trimLdo18flashVoutAon(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn trimLdo18flashVoutAonParity(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimLdo18flashVoutAonParity(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trimLdo18flashVoutAonEn(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimLdo18flashVoutAonEn(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        trimLdo18flashVoutAon: u32,
        trimLdo18flashVoutAonParity: u32,
        trimLdo18flashVoutAonEn: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let trimLdo18flashVoutAon: u32 =
                unsafe { ::core::mem::transmute(trimLdo18flashVoutAon) };
            trimLdo18flashVoutAon as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let trimLdo18flashVoutAonParity: u32 =
                unsafe { ::core::mem::transmute(trimLdo18flashVoutAonParity) };
            trimLdo18flashVoutAonParity as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let trimLdo18flashVoutAonEn: u32 =
                unsafe { ::core::mem::transmute(trimLdo18flashVoutAonEn) };
            trimLdo18flashVoutAonEn as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "  @brief Efuse analog usb20rcal trim type definition"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Efuse_Ana_USB20RCAL_Trim_Type {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Efuse_Ana_USB20RCAL_Trim_Type() {
    assert_eq!(
        ::core::mem::size_of::<Efuse_Ana_USB20RCAL_Trim_Type>(),
        4usize,
        concat!("Size of: ", stringify!(Efuse_Ana_USB20RCAL_Trim_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<Efuse_Ana_USB20RCAL_Trim_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(Efuse_Ana_USB20RCAL_Trim_Type))
    );
}
impl Efuse_Ana_USB20RCAL_Trim_Type {
    #[inline]
    pub fn trimUsb20rcalAon(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_trimUsb20rcalAon(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn trimUsb20rcalAonParity(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimUsb20rcalAonParity(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trimUsb20rcalAonEn(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimUsb20rcalAonEn(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        trimUsb20rcalAon: u32,
        trimUsb20rcalAonParity: u32,
        trimUsb20rcalAonEn: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let trimUsb20rcalAon: u32 = unsafe { ::core::mem::transmute(trimUsb20rcalAon) };
            trimUsb20rcalAon as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let trimUsb20rcalAonParity: u32 =
                unsafe { ::core::mem::transmute(trimUsb20rcalAonParity) };
            trimUsb20rcalAonParity as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let trimUsb20rcalAonEn: u32 = unsafe { ::core::mem::transmute(trimUsb20rcalAonEn) };
            trimUsb20rcalAonEn as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "  @brief Efuse analog RC32M trim type definition"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Efuse_Ana_RC32M_Trim_Type {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Efuse_Ana_RC32M_Trim_Type() {
    assert_eq!(
        ::core::mem::size_of::<Efuse_Ana_RC32M_Trim_Type>(),
        4usize,
        concat!("Size of: ", stringify!(Efuse_Ana_RC32M_Trim_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<Efuse_Ana_RC32M_Trim_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(Efuse_Ana_RC32M_Trim_Type))
    );
}
impl Efuse_Ana_RC32M_Trim_Type {
    #[inline]
    pub fn trimRc32mCodeFrExt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 8u8) as u32) }
    }
    #[inline]
    pub fn set_trimRc32mCodeFrExt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 8u8, val as u64)
        }
    }
    #[inline]
    pub fn trimRc32mCodeFrExtParity(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimRc32mCodeFrExtParity(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trimRc32mExtCodeEn(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(9usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimRc32mExtCodeEn(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(9usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        trimRc32mCodeFrExt: u32,
        trimRc32mCodeFrExtParity: u32,
        trimRc32mExtCodeEn: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 8u8, {
            let trimRc32mCodeFrExt: u32 = unsafe { ::core::mem::transmute(trimRc32mCodeFrExt) };
            trimRc32mCodeFrExt as u64
        });
        __bindgen_bitfield_unit.set(8usize, 1u8, {
            let trimRc32mCodeFrExtParity: u32 =
                unsafe { ::core::mem::transmute(trimRc32mCodeFrExtParity) };
            trimRc32mCodeFrExtParity as u64
        });
        __bindgen_bitfield_unit.set(9usize, 1u8, {
            let trimRc32mExtCodeEn: u32 = unsafe { ::core::mem::transmute(trimRc32mExtCodeEn) };
            trimRc32mExtCodeEn as u64
        });
        __bindgen_bitfield_unit.set(10usize, 22u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "  @brief Efuse analog RC32K trim type definition"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Efuse_Ana_RC32K_Trim_Type {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Efuse_Ana_RC32K_Trim_Type() {
    assert_eq!(
        ::core::mem::size_of::<Efuse_Ana_RC32K_Trim_Type>(),
        4usize,
        concat!("Size of: ", stringify!(Efuse_Ana_RC32K_Trim_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<Efuse_Ana_RC32K_Trim_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(Efuse_Ana_RC32K_Trim_Type))
    );
}
impl Efuse_Ana_RC32K_Trim_Type {
    #[inline]
    pub fn trimRc32kCodeFrExt(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 10u8) as u32) }
    }
    #[inline]
    pub fn set_trimRc32kCodeFrExt(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 10u8, val as u64)
        }
    }
    #[inline]
    pub fn trimRc32kCodeFrExtParity(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(10usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimRc32kCodeFrExtParity(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(10usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trimRc32kExtCodeEn(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(11usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimRc32kExtCodeEn(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(11usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 20u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 20u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        trimRc32kCodeFrExt: u32,
        trimRc32kCodeFrExtParity: u32,
        trimRc32kExtCodeEn: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 10u8, {
            let trimRc32kCodeFrExt: u32 = unsafe { ::core::mem::transmute(trimRc32kCodeFrExt) };
            trimRc32kCodeFrExt as u64
        });
        __bindgen_bitfield_unit.set(10usize, 1u8, {
            let trimRc32kCodeFrExtParity: u32 =
                unsafe { ::core::mem::transmute(trimRc32kCodeFrExtParity) };
            trimRc32kCodeFrExtParity as u64
        });
        __bindgen_bitfield_unit.set(11usize, 1u8, {
            let trimRc32kExtCodeEn: u32 = unsafe { ::core::mem::transmute(trimRc32kExtCodeEn) };
            trimRc32kExtCodeEn as u64
        });
        __bindgen_bitfield_unit.set(12usize, 20u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Efuse_Ana_LDO18IO_VOUT_Trim_Type {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Efuse_Ana_LDO18IO_VOUT_Trim_Type() {
    assert_eq!(
        ::core::mem::size_of::<Efuse_Ana_LDO18IO_VOUT_Trim_Type>(),
        4usize,
        concat!("Size of: ", stringify!(Efuse_Ana_LDO18IO_VOUT_Trim_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<Efuse_Ana_LDO18IO_VOUT_Trim_Type>(),
        4usize,
        concat!(
            "Alignment of ",
            stringify!(Efuse_Ana_LDO18IO_VOUT_Trim_Type)
        )
    );
}
impl Efuse_Ana_LDO18IO_VOUT_Trim_Type {
    #[inline]
    pub fn trimLdo18ioVoutVal(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 4u8) as u32) }
    }
    #[inline]
    pub fn set_trimLdo18ioVoutVal(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 4u8, val as u64)
        }
    }
    #[inline]
    pub fn trimLdo18ioVoutParity(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(4usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimLdo18ioVoutParity(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(4usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn trimLdo18ioVoutEn(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(5usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_trimLdo18ioVoutEn(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(5usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 26u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 26u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        trimLdo18ioVoutVal: u32,
        trimLdo18ioVoutParity: u32,
        trimLdo18ioVoutEn: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 4u8, {
            let trimLdo18ioVoutVal: u32 = unsafe { ::core::mem::transmute(trimLdo18ioVoutVal) };
            trimLdo18ioVoutVal as u64
        });
        __bindgen_bitfield_unit.set(4usize, 1u8, {
            let trimLdo18ioVoutParity: u32 =
                unsafe { ::core::mem::transmute(trimLdo18ioVoutParity) };
            trimLdo18ioVoutParity as u64
        });
        __bindgen_bitfield_unit.set(5usize, 1u8, {
            let trimLdo18ioVoutEn: u32 = unsafe { ::core::mem::transmute(trimLdo18ioVoutEn) };
            trimLdo18ioVoutEn as u64
        });
        __bindgen_bitfield_unit.set(6usize, 26u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "  @brief Efuse analog TSEN trim type definition"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Efuse_TSEN_Refcode_Corner_Type {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Efuse_TSEN_Refcode_Corner_Type() {
    assert_eq!(
        ::core::mem::size_of::<Efuse_TSEN_Refcode_Corner_Type>(),
        4usize,
        concat!("Size of: ", stringify!(Efuse_TSEN_Refcode_Corner_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<Efuse_TSEN_Refcode_Corner_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(Efuse_TSEN_Refcode_Corner_Type))
    );
}
impl Efuse_TSEN_Refcode_Corner_Type {
    #[inline]
    pub fn tsenRefcodeCorner(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_tsenRefcodeCorner(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn tsenRefcodeCornerParity(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tsenRefcodeCornerParity(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tsenRefcodeCornerEn(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tsenRefcodeCornerEn(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn tsenRefcodeCornerVersion(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_tsenRefcodeCornerVersion(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(15usize, 17u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(15usize, 17u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        tsenRefcodeCorner: u32,
        tsenRefcodeCornerParity: u32,
        tsenRefcodeCornerEn: u32,
        tsenRefcodeCornerVersion: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let tsenRefcodeCorner: u32 = unsafe { ::core::mem::transmute(tsenRefcodeCorner) };
            tsenRefcodeCorner as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let tsenRefcodeCornerParity: u32 =
                unsafe { ::core::mem::transmute(tsenRefcodeCornerParity) };
            tsenRefcodeCornerParity as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let tsenRefcodeCornerEn: u32 = unsafe { ::core::mem::transmute(tsenRefcodeCornerEn) };
            tsenRefcodeCornerEn as u64
        });
        __bindgen_bitfield_unit.set(14usize, 1u8, {
            let tsenRefcodeCornerVersion: u32 =
                unsafe { ::core::mem::transmute(tsenRefcodeCornerVersion) };
            tsenRefcodeCornerVersion as u64
        });
        __bindgen_bitfield_unit.set(15usize, 17u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "  @brief Efuse analog ADC Gain trim type definition"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Efuse_ADC_Gain_Coeff_Type {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Efuse_ADC_Gain_Coeff_Type() {
    assert_eq!(
        ::core::mem::size_of::<Efuse_ADC_Gain_Coeff_Type>(),
        4usize,
        concat!("Size of: ", stringify!(Efuse_ADC_Gain_Coeff_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<Efuse_ADC_Gain_Coeff_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(Efuse_ADC_Gain_Coeff_Type))
    );
}
impl Efuse_ADC_Gain_Coeff_Type {
    #[inline]
    pub fn adcGainCoeff(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 12u8) as u32) }
    }
    #[inline]
    pub fn set_adcGainCoeff(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 12u8, val as u64)
        }
    }
    #[inline]
    pub fn adcGainCoeffParity(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(12usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_adcGainCoeffParity(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(12usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn adcGainCoeffEn(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(13usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_adcGainCoeffEn(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(13usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn reserved(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(14usize, 18u8) as u32) }
    }
    #[inline]
    pub fn set_reserved(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(14usize, 18u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        adcGainCoeff: u32,
        adcGainCoeffParity: u32,
        adcGainCoeffEn: u32,
        reserved: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 12u8, {
            let adcGainCoeff: u32 = unsafe { ::core::mem::transmute(adcGainCoeff) };
            adcGainCoeff as u64
        });
        __bindgen_bitfield_unit.set(12usize, 1u8, {
            let adcGainCoeffParity: u32 = unsafe { ::core::mem::transmute(adcGainCoeffParity) };
            adcGainCoeffParity as u64
        });
        __bindgen_bitfield_unit.set(13usize, 1u8, {
            let adcGainCoeffEn: u32 = unsafe { ::core::mem::transmute(adcGainCoeffEn) };
            adcGainCoeffEn as u64
        });
        __bindgen_bitfield_unit.set(14usize, 18u8, {
            let reserved: u32 = unsafe { ::core::mem::transmute(reserved) };
            reserved as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "  @brief Efuse analog device info type definition"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Efuse_Device_Info_Type {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Efuse_Device_Info_Type() {
    assert_eq!(
        ::core::mem::size_of::<Efuse_Device_Info_Type>(),
        4usize,
        concat!("Size of: ", stringify!(Efuse_Device_Info_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<Efuse_Device_Info_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(Efuse_Device_Info_Type))
    );
}
impl Efuse_Device_Info_Type {
    #[inline]
    pub fn rsvd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 22u8) as u32) }
    }
    #[inline]
    pub fn set_rsvd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 22u8, val as u64)
        }
    }
    #[inline]
    pub fn deviceInfo(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(22usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_deviceInfo(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(22usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn psramInfo(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(25usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_psramInfo(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(25usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn memoryInfo(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(27usize, 2u8) as u32) }
    }
    #[inline]
    pub fn set_memoryInfo(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(27usize, 2u8, val as u64)
        }
    }
    #[inline]
    pub fn chipInfo(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(29usize, 3u8) as u32) }
    }
    #[inline]
    pub fn set_chipInfo(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(29usize, 3u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        rsvd: u32,
        deviceInfo: u32,
        psramInfo: u32,
        memoryInfo: u32,
        chipInfo: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 22u8, {
            let rsvd: u32 = unsafe { ::core::mem::transmute(rsvd) };
            rsvd as u64
        });
        __bindgen_bitfield_unit.set(22usize, 3u8, {
            let deviceInfo: u32 = unsafe { ::core::mem::transmute(deviceInfo) };
            deviceInfo as u64
        });
        __bindgen_bitfield_unit.set(25usize, 2u8, {
            let psramInfo: u32 = unsafe { ::core::mem::transmute(psramInfo) };
            psramInfo as u64
        });
        __bindgen_bitfield_unit.set(27usize, 2u8, {
            let memoryInfo: u32 = unsafe { ::core::mem::transmute(memoryInfo) };
            memoryInfo as u64
        });
        __bindgen_bitfield_unit.set(29usize, 3u8, {
            let chipInfo: u32 = unsafe { ::core::mem::transmute(chipInfo) };
            chipInfo as u64
        });
        __bindgen_bitfield_unit
    }
}
#[doc = "  @brief Efuse Capcode type definition"]
#[repr(C)]
#[repr(align(4))]
#[derive(Debug, Copy, Clone)]
pub struct Efuse_Capcode_Info_Type {
    pub _bitfield_align_1: [u32; 0],
    pub _bitfield_1: __BindgenBitfieldUnit<[u8; 4usize]>,
}
#[test]
fn bindgen_test_layout_Efuse_Capcode_Info_Type() {
    assert_eq!(
        ::core::mem::size_of::<Efuse_Capcode_Info_Type>(),
        4usize,
        concat!("Size of: ", stringify!(Efuse_Capcode_Info_Type))
    );
    assert_eq!(
        ::core::mem::align_of::<Efuse_Capcode_Info_Type>(),
        4usize,
        concat!("Alignment of ", stringify!(Efuse_Capcode_Info_Type))
    );
}
impl Efuse_Capcode_Info_Type {
    #[inline]
    pub fn capCode(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(0usize, 6u8) as u32) }
    }
    #[inline]
    pub fn set_capCode(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(0usize, 6u8, val as u64)
        }
    }
    #[inline]
    pub fn parity(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(6usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_parity(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(6usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn en(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(7usize, 1u8) as u32) }
    }
    #[inline]
    pub fn set_en(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(7usize, 1u8, val as u64)
        }
    }
    #[inline]
    pub fn rsvd(&self) -> u32 {
        unsafe { ::core::mem::transmute(self._bitfield_1.get(8usize, 24u8) as u32) }
    }
    #[inline]
    pub fn set_rsvd(&mut self, val: u32) {
        unsafe {
            let val: u32 = ::core::mem::transmute(val);
            self._bitfield_1.set(8usize, 24u8, val as u64)
        }
    }
    #[inline]
    pub fn new_bitfield_1(
        capCode: u32,
        parity: u32,
        en: u32,
        rsvd: u32,
    ) -> __BindgenBitfieldUnit<[u8; 4usize]> {
        let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 4usize]> = Default::default();
        __bindgen_bitfield_unit.set(0usize, 6u8, {
            let capCode: u32 = unsafe { ::core::mem::transmute(capCode) };
            capCode as u64
        });
        __bindgen_bitfield_unit.set(6usize, 1u8, {
            let parity: u32 = unsafe { ::core::mem::transmute(parity) };
            parity as u64
        });
        __bindgen_bitfield_unit.set(7usize, 1u8, {
            let en: u32 = unsafe { ::core::mem::transmute(en) };
            en as u64
        });
        __bindgen_bitfield_unit.set(8usize, 24u8, {
            let rsvd: u32 = unsafe { ::core::mem::transmute(rsvd) };
            rsvd as u64
        });
        __bindgen_bitfield_unit
    }
}
